<span class="pl-c">// heres a comment</span>
<span class="pl-k">bool</span> <span class="pl-v">notInitialized</span>;
<span class="pl-k">var</span> <span class="pl-v">anotherNotInitialized</span>;
<span class="pl-k">int</span> <span class="pl-v">variableInNotBlock</span> = <span class="pl-c1">3</span>;
<span class="pl-k">string</span> <span class="pl-v">anotherNonBlock</span> = <span class="pl-s">"hello"</span>;

<span class="pl-k">namespace</span> <span class="pl-e">zeroweb</span>.<span class="pl-e">Migrations</span>
{
    [<span class="pl-e">DbContext</span>(<span class="pl-k">typeof</span>(<span class="pl-en">Context</span>))]
    <span class="pl-k">partial</span> <span class="pl-k">class</span> <span class="pl-e">ContextModelSnapshot</span> : <span class="pl-en">ModelSnapshot</span>
    {
        <span class="pl-k">protected</span> <span class="pl-k">override</span> <span class="pl-k">void</span> <span class="pl-e">BuildModel</span>(<span class="pl-en">ModelBuilder</span> <span class="pl-v">modelBuilder</span>)
        {
            <span class="pl-v">modelBuilder</span>
                .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"ProductVersion"</span>, <span class="pl-s">"1.0.0-rtm-21431"</span>);

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"ConcurrencyStamp"</span>)
                        .<span class="pl-e">IsConcurrencyToken</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Name"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">256</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"NormalizedName"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">256</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"NormalizedName"</span>)
                        .<span class="pl-e">HasName</span>(<span class="pl-s">"RoleNameIndex"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"AspNetRoles"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"ClaimType"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"ClaimValue"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"RoleId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"RoleId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"AspNetRoleClaims"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"ClaimType"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"ClaimValue"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"UserId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"UserId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"AspNetUserClaims"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"LoginProvider"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"ProviderKey"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"ProviderDisplayName"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"UserId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"LoginProvider"</span>, <span class="pl-s">"ProviderKey"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"UserId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"AspNetUserLogins"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"UserId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"RoleId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"UserId"</span>, <span class="pl-s">"RoleId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"RoleId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"UserId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"AspNetUserRoles"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"UserId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"LoginProvider"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Name"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Value"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"UserId"</span>, <span class="pl-s">"LoginProvider"</span>, <span class="pl-s">"Name"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"AspNetUserTokens"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Article"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"AuthorId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Content"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">DateTime</span>>(<span class="pl-s">"Date"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Key"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">128</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">double</span>?>(<span class="pl-s">"LocationLatitude"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">double</span>?>(<span class="pl-s">"LocationLongitude"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"LocationName"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">32</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">double</span>?>(<span class="pl-s">"LocationZoom"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">bool</span>>(<span class="pl-s">"Published"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Thumbnail"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">256</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Title"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">64</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Views"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"AuthorId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"Key"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"Date"</span>, <span class="pl-s">"Published"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"Articles"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Assignment"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"IssueId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"TagId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"IssueId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"TagId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"Assignments"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Comment"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"ArticleId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Author"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">64</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Content"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">256</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">DateTime</span>>(<span class="pl-s">"Date"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">bool</span>>(<span class="pl-s">"Published"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"ArticleId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"Comments"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Issue"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"ArticleId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">TimeSpan</span>?>(<span class="pl-s">"BaselineDuration"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">DateTime</span>?>(<span class="pl-s">"BaselineEnd"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">DateTime</span>?>(<span class="pl-s">"BaselineStart"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">byte</span>>(<span class="pl-s">"Complexity"</span>)
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"tinyint"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"DependencyId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">TimeSpan</span>?>(<span class="pl-s">"Duration"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">DateTime</span>?>(<span class="pl-s">"End"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"ParentId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">DateTime</span>?>(<span class="pl-s">"Start"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Title"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">32</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"ArticleId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"DependencyId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"ParentId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"Issues"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Metadata"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"ArticleId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"TagId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"ArticleId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"TagId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"Metadata"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Star"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"ArticleId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"IpAddress"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">16</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"ArticleId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"Stars"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Tag"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Description"</span>)
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">128</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Name"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">16</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"ParentId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"Name"</span>)
                        .<span class="pl-e">IsUnique</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"ParentId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"Tags"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.User"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"AccessFailedCount"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"ConcurrencyStamp"</span>)
                        .<span class="pl-e">IsConcurrencyToken</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Email"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">256</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">bool</span>>(<span class="pl-s">"EmailConfirmed"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">bool</span>>(<span class="pl-s">"LockoutEnabled"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-en">DateTimeOffset</span>?>(<span class="pl-s">"LockoutEnd"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"NormalizedEmail"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">256</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"NormalizedUserName"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">256</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"PasswordHash"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"PhoneNumber"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">bool</span>>(<span class="pl-s">"PhoneNumberConfirmed"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"SecurityStamp"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">bool</span>>(<span class="pl-s">"TwoFactorEnabled"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"UserName"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">256</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"NormalizedEmail"</span>)
                        .<span class="pl-e">HasName</span>(<span class="pl-s">"EmailIndex"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"NormalizedUserName"</span>)
                        .<span class="pl-e">IsUnique</span>()
                        .<span class="pl-e">HasName</span>(<span class="pl-s">"UserNameIndex"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"AspNetUsers"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Vote"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Id"</span>)
                        .<span class="pl-e">ValueGeneratedOnAdd</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">string</span>>(<span class="pl-s">"Author"</span>)
                        .<span class="pl-e">IsRequired</span>()
                        .<span class="pl-e">HasColumnType</span>(<span class="pl-s">"char"</span>)
                        .<span class="pl-e">HasAnnotation</span>(<span class="pl-s">"MaxLength"</span>, <span class="pl-c1">64</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>?>(<span class="pl-s">"CommentId"</span>)
                        .<span class="pl-e">IsRequired</span>();

                    <span class="pl-v">b</span>.<span class="pl-e">Property</span><<span class="pl-k">int</span>>(<span class="pl-s">"Value"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasKey</span>(<span class="pl-s">"Id"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasIndex</span>(<span class="pl-s">"CommentId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">ToTable</span>(<span class="pl-s">"Votes"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Claims"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"RoleId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.User"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Claims"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"UserId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.User"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Logins"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"UserId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole<string>"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Users"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"RoleId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.User"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Roles"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"UserId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Article"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Tag"</span>, <span class="pl-s">"Author"</span>)
                        .<span class="pl-e">WithMany</span>()
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"AuthorId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Assignment"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Issue"</span>, <span class="pl-s">"Issue"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Assignments"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"IssueId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Tag"</span>, <span class="pl-s">"Tag"</span>)
                        .<span class="pl-e">WithMany</span>()
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"TagId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Comment"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Article"</span>, <span class="pl-s">"Article"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Comments"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"ArticleId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Issue"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Article"</span>, <span class="pl-s">"Article"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Issues"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"ArticleId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Issue"</span>, <span class="pl-s">"Dependency"</span>)
                        .<span class="pl-e">WithMany</span>()
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"DependencyId"</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Issue"</span>, <span class="pl-s">"Parent"</span>)
                        .<span class="pl-e">WithMany</span>()
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"ParentId"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Metadata"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Article"</span>, <span class="pl-s">"Article"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Metadata"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"ArticleId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);

                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Tag"</span>, <span class="pl-s">"Tag"</span>)
                        .<span class="pl-e">WithMany</span>()
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"TagId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Star"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Article"</span>, <span class="pl-s">"Article"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Stars"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"ArticleId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Tag"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Tag"</span>, <span class="pl-s">"Parent"</span>)
                        .<span class="pl-e">WithMany</span>()
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"ParentId"</span>);
                });

            <span class="pl-v">modelBuilder</span>.<span class="pl-e">Entity</span>(<span class="pl-s">"ZeroWeb.Models.Vote"</span>, <span class="pl-v">b</span> =>
                {
                    <span class="pl-v">b</span>.<span class="pl-e">HasOne</span>(<span class="pl-s">"ZeroWeb.Models.Comment"</span>, <span class="pl-s">"Comment"</span>)
                        .<span class="pl-e">WithMany</span>(<span class="pl-s">"Votes"</span>)
                        .<span class="pl-e">HasForeignKey</span>(<span class="pl-s">"CommentId"</span>)
                        .<span class="pl-e">OnDelete</span>(<span class="pl-v">DeleteBehavior</span>.<span class="pl-e">Cascade</span>);
                });
        }
    }
}

<span class="pl-c">/*--------------------------------------------------------*\
|   ______    __   |
|  |  __  |  |  |  |
|  | |  | |  |  |  |
|  | !__! |  |  |  |
|  !______!  !__!  |  binary : tech art
|
|  Defines the News Endpoint.
|----------------------------------------------------------
|  Copyright(C) 2016 Valeriy Novytskyy
\*---------------------------------------------------------*/</span>

<span class="pl-k">using</span> <span class="pl-e">System</span>;
<span class="pl-k">using</span> <span class="pl-e">System</span>.<span class="pl-e">Linq</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">AspNetCore</span>.<span class="pl-e">Mvc</span>;
<span class="pl-k">using</span> <span class="pl-e">ZeroWeb</span>.<span class="pl-e">Models</span>;

<span class="pl-c">/*
&lt;<span class="pl-ent">CommentList</span>/&gt;
&lt;<span class="pl-ent">UserList</span> /&gt;

&lt;<span class="pl-ent">SomeTag</span>&gt;
	&lt;<span class="pl-ent">ChildTag</span>&gt;
		&lt;<span class="pl-ent">Child</span> /&gt;
	&lt;/<span class="pl-ent">ChildTag</span>&gt;
&lt;/<span class="pl-ent">SomeTag</span>&gt;

&lt;<span class="pl-ent">WithAttribute</span> <span class="pl-e">One</span>=<span class="pl-s">"hello"</span> <span class="pl-e">Two</span>=<span class="pl-s">"world"</span>/&gt;
*/</span>

<span class="pl-k">namespace</span> <span class="pl-e">ZeroWeb</span>.<span class="pl-e">Api</span>
{
    <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
    <span class="pl-c">/// The News Endpoint.</span>
    <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
    [<span class="pl-e">Route</span>(<span class="pl-s">"api/news"</span>)]
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-e">NewsController</span>: <span class="pl-en">Controller</span>
    {
        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// The site data store.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-en">IServiceProvider</span> <span class="pl-v">services</span>;
		<span class="pl-en">AnotherType</span> <span class="pl-v">more</span>;
		<span class="pl-en">OneMoreType</span> <span class="pl-v">evenMore</span>;
		<span class="pl-en">HelloWorld</span> <span class="pl-v">goodbye</span>;
		<span class="pl-en">ICelldweller</span> <span class="pl-v">guitar</span>;

		<span class="pl-k">private</span> <span class="pl-k">const</span> <span class="pl-c1">mustBeConst</span> = <span class="pl-c1">3</span> > <span class="pl-c1">5</span>;

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Initializes a new instance of the &lt;<span class="pl-ent">see</span> <span class="pl-e">cref</span>=<span class="pl-s">"NewsController"</span>/&gt; class.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"services"</span>&gt;The application container.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">public</span> <span class="pl-e">NewsController</span>(<span class="pl-en">IServiceProvider</span> <span class="pl-v">services</span>)
        {
            <span class="pl-c1">this</span>.<span class="pl-v">services</span> = <span class="pl-v">services</span>;

			<span class="pl-c1">this</span>
				.<span class="pl-v">property</span> = <span class="pl-v">value</span>;

			<span class="pl-v">another</span>
				.<span class="pl-e">property</span> = <span class="pl-s">"goodbye"</span>;

			<span class="pl-v">MyConsole</span>.<span class="pl-e">WriteLine</span>();

			<span class="pl-en">MyFunc</span><<span class="pl-k">string</span>> <span class="pl-v">test</span> = <span class="pl-k">new</span> <span class="pl-e">test</span>();
			<span class="pl-en">MyFunc</span><<span class="pl-en">ICat</span>> <span class="pl-v">testing</span> = <span class="pl-k">new</span> <span class="pl-e">testing</span>();

			<span class="pl-k">const</span> <span class="pl-c1">whatever</span> = <span class="pl-s">"testing"</span>;

			<span class="pl-c1">Console</span>.<span class="pl-e">WriteLine</span>(<span class="pl-s">"lazy fox"</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Gets the news stories.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-k">public</span> <span class="pl-en">IActionResult</span> <span class="pl-e">GetStories</span>()
        {
            <span class="pl-k">try</span>
            {
                <span class="pl-en">IDataStore</span> <span class="pl-v">store</span> = <span class="pl-c1">this</span>.<span class="pl-v">services</span>.<span class="pl-e">GetService</span>(<span class="pl-k">typeof</span>(<span class="pl-en">IDataStore</span>)) <span class="pl-k">as</span> <span class="pl-en">IDataStore</span>;
                <span class="pl-k">string</span> <span class="pl-v">excludeTag</span> = <span class="pl-v">Tags</span>.<span class="pl-e">Story</span>.<span class="pl-e">ToString</span>().<span class="pl-e">ToLower</span>();

                <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-e">Json</span>(
                    <span class="pl-v">store</span>.<span class="pl-e">GetArticles</span>(<span class="pl-v">Tags</span>.<span class="pl-e">Story</span>).<span class="pl-e">Select</span>(<span class="pl-v">story</span> => <span class="pl-k">new</span> 
                    {
                        <span class="pl-v">id</span> = <span class="pl-v">story</span>.<span class="pl-e">Id</span>,
                        <span class="pl-v">title</span> = <span class="pl-v">story</span>.<span class="pl-e">Title</span>,
                        <span class="pl-v">date</span> = <span class="pl-v">story</span>.<span class="pl-e">Date</span>,
                        <span class="pl-v">author</span> = <span class="pl-v">story</span>.<span class="pl-e">Author</span>.<span class="pl-e">Name</span>,
                        <span class="pl-v">tags</span> = <span class="pl-v">story</span>.<span class="pl-e">Metadata</span>.<span class="pl-e">Where</span>(<span class="pl-v">metadata</span> => <span class="pl-v">metadata</span>.<span class="pl-e">Tag</span>.<span class="pl-e">Name</span>.<span class="pl-e">ToLower</span>() != <span class="pl-v">excludeTag</span>)
                                            .<span class="pl-e">Select</span>(<span class="pl-v">metadata</span> => <span class="pl-v">metadata</span>.<span class="pl-e">Tag</span>.<span class="pl-e">Name</span>),
                        <span class="pl-v">content</span> = <span class="pl-v">story</span>.<span class="pl-e">Content</span>
                    }).<span class="pl-e">ToArray</span>().<span class="pl-e">Select</span>(<span class="pl-v">result</span> => <span class="pl-k">new</span>
                    {
                        <span class="pl-v">result</span>.<span class="pl-e">id</span>,
                        <span class="pl-v">title</span> = <span class="pl-v">result</span>.<span class="pl-e">title</span>,
                        <span class="pl-v">date</span> = <span class="pl-v">Shared</span>.<span class="pl-e">FormatDate</span>(<span class="pl-v">result</span>.<span class="pl-e">date</span>),
                        <span class="pl-v">author</span> = <span class="pl-v">result</span>.<span class="pl-e">author</span>,
                        <span class="pl-v">tags</span> = <span class="pl-v">result</span>.<span class="pl-e">tags</span>.<span class="pl-e">Select</span>(<span class="pl-v">tagName</span> => <span class="pl-v">Shared</span>.<span class="pl-e">FormatTag</span>(<span class="pl-v">tagName</span>)),
                        <span class="pl-v">content</span> = <span class="pl-v">result</span>.<span class="pl-e">content</span>
                    }));
            }
            <span class="pl-k">catch</span>
            {
                <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-e">StatusCode</span>(<span class="pl-c1">500</span>);
            }
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Gets the news story markdown content.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"id"</span>&gt;The story id&lt;/<span class="pl-ent">param</span>&gt;</span>
        [<span class="pl-e">Route</span>(<span class="pl-s">"{id}"</span>)]
        <span class="pl-k">public</span> <span class="pl-en">IActionResult</span> <span class="pl-e">GetStory</span>(<span class="pl-k">int</span> <span class="pl-v">id</span>)
        {
            <span class="pl-k">try</span>
            {
                <span class="pl-en">IDataStore</span> <span class="pl-v">store</span> = <span class="pl-c1">this</span>.<span class="pl-v">services</span>.<span class="pl-e">GetService</span>(<span class="pl-k">typeof</span>(<span class="pl-en">IDataStore</span>)) <span class="pl-k">as</span> <span class="pl-en">IDataStore</span>;
                <span class="pl-k">var</span> <span class="pl-v">story</span> = <span class="pl-v">store</span>.<span class="pl-e">GetArticle</span>(<span class="pl-v">id</span>);

                <span class="pl-k">if</span> (<span class="pl-v">story</span> == <span class="pl-c1">null</span>)
                {
                    <span class="pl-k">return</span> <span class="pl-e">NotFound</span>();

                    <span class="pl-k">var</span> <span class="pl-v">x</span> = +<span class="pl-c1">3.</span><span class="pl-c1">003</span>;
                    <span class="pl-k">float</span> <span class="pl-v">f</span> = .<span class="pl-c1">302</span>;
                    <span class="pl-k">float</span> <span class="pl-v">g</span> = <span class="pl-c1">1.</span><span class="pl-c1">02f</span>;
                    <span class="pl-k">int</span> <span class="pl-v">k</span> = -<span class="pl-c1">3</span>;
                    <span class="pl-k">uint</span> <span class="pl-v">hex</span> = <span class="pl-c1">0x40001</span>;

                    <span class="pl-k">switch</span>(<span class="pl-v">hello</span>)
                    {
                        <span class="pl-k">case</span> <span class="pl-c1">ONE</span>:
                            <span class="pl-e">helloWorld</span>();
                            <span class="pl-k">break</span>;
                        <span class="pl-k">case</span> <span class="pl-c1">TWO</span>:
                            {
                                <span class="pl-e">helloWorld</span>();
                            }
                            <span class="pl-k">break</span>;
                        <span class="pl-k">case</span> <span class="pl-c1">THREE</span>:
                            {
                                <span class="pl-e">helloWorld</span>();
                            }
                            <span class="pl-k">break</span>;
                    }
                }

                <span class="pl-k">return</span> <span class="pl-e">Ok</span>(<span class="pl-k">new</span> { <span class="pl-v">story</span>.<span class="pl-e">Content</span> });
            }
            <span class="pl-k">catch</span>
            {
                <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-e">StatusCode</span>(<span class="pl-c1">500L</span>);
            }
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Star a news story.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"id"</span>&gt;The story id&lt;/<span class="pl-ent">param</span>&gt;</span>
        [<span class="pl-e">HttpPost</span>(<span class="pl-s">"star/{id}"</span>)]
        <span class="pl-k">public</span> <span class="pl-en">IActionResult</span> <span class="pl-e">StarStory</span>(<span class="pl-k">int</span> <span class="pl-v">id</span>)
        {
            <span class="pl-k">try</span>
            {
                <span class="pl-en">IDataStore</span> <span class="pl-v">store</span> = <span class="pl-c1">this</span>.<span class="pl-v">services</span>.<span class="pl-e">GetService</span>(<span class="pl-k">typeof</span>(<span class="pl-en">IDataStore</span>)) <span class="pl-k">as</span> <span class="pl-en">IDataStore</span>;
                <span class="pl-k">var</span> <span class="pl-v">story</span> = <span class="pl-v">store</span>.<span class="pl-e">GetArticle</span>(<span class="pl-v">id</span>);

                <span class="pl-k">if</span> (<span class="pl-v">story</span> == <span class="pl-c1">null</span>)
                {
                    <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-e">NotFound</span>();
                }
                
                <span class="pl-k">var</span> <span class="pl-v">storyStars</span> = <span class="pl-v">store</span>.<span class="pl-e">GetArticleStars</span>(<span class="pl-v">id</span>);
                <span class="pl-k">string</span> <span class="pl-v">excludeIpAddress</span> = <span class="pl-v">Shared</span>.<span class="pl-e">GetRequestIpAddress</span>(<span class="pl-c1">this</span>.<span class="pl-v">Request</span>);
                
                <span class="pl-k">if</span> (<span class="pl-v">storyStars</span>.<span class="pl-e">Any</span>(<span class="pl-v">star</span> => <span class="pl-v">star</span>.<span class="pl-e">IpAddress</span> == <span class="pl-v">excludeIpAddress</span>))
                {
                    <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-e">BadRequest</span>();
                }
                
                <span class="pl-v">story</span>.<span class="pl-e">Stars</span>.<span class="pl-e">Add</span>(<span class="pl-k">new</span> <span class="pl-e">Star</span>(<span class="pl-v">story</span>, <span class="pl-v">excludeIpAddress</span>));
                <span class="pl-v">store</span>.<span class="pl-e">Save</span>();
                
                <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-e">Ok</span>(<span class="pl-k">new</span> { <span class="pl-v">stars</span> = <span class="pl-v">storyStars</span>.<span class="pl-e">Count</span>() });
            }
            <span class="pl-k">catch</span>
            {
                <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-e">StatusCode</span>(<span class="pl-c1">500</span>);
            }
        }
    }
}

<span class="pl-c">/*--------------------------------------------------------*\
|   ______    __   |
|  |  __  |  |  |  |
|  | |  | |  |  |  |
|  | !__! |  |  |  |
|  !______!  !__!  |  binary : tech art
|
|  Application startup.
|----------------------------------------------------------
|  Copyright(C) 2016 Valeriy Novytskyy
\*---------------------------------------------------------*/</span>

<span class="pl-k">using</span> <span class="pl-e">System</span>;
<span class="pl-k">using</span> <span class="pl-e">System</span>.<span class="pl-e">IO</span>;
<span class="pl-k">using</span> <span class="pl-e">AspNet</span>.<span class="pl-e">Security</span>.<span class="pl-e">OAuth</span>.<span class="pl-e">GitHub</span>;
<span class="pl-k">using</span> <span class="pl-e">AspNet</span>.<span class="pl-e">Security</span>.<span class="pl-e">OAuth</span>.<span class="pl-e">LinkedIn</span>;
<span class="pl-k">using</span> <span class="pl-e">AspNet</span>.<span class="pl-e">Security</span>.<span class="pl-e">OAuth</span>.<span class="pl-e">Reddit</span>;
<span class="pl-k">using</span> <span class="pl-e">AspNet</span>.<span class="pl-e">Security</span>.<span class="pl-e">OAuth</span>.<span class="pl-e">Yahoo</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">AspNetCore</span>.<span class="pl-e">Authentication</span>.<span class="pl-e">OAuth</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">AspNetCore</span>.<span class="pl-e">Builder</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">AspNetCore</span>.<span class="pl-e">Hosting</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">AspNetCore</span>.<span class="pl-e">Identity</span>.<span class="pl-e">EntityFrameworkCore</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">Extensions</span>.<span class="pl-e">Configuration</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">Extensions</span>.<span class="pl-e">DependencyInjection</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">Extensions</span>.<span class="pl-e">FileProviders</span>;
<span class="pl-k">using</span> <span class="pl-e">Microsoft</span>.<span class="pl-e">Extensions</span>.<span class="pl-e">Logging</span>;
<span class="pl-k">using</span> <span class="pl-e">ZeroWeb</span>.<span class="pl-e">Models</span>;

<span class="pl-k">namespace</span> <span class="pl-e">ZeroWeb</span>
{
    <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
    <span class="pl-c">/// Application startup.</span>
    <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
    <span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-e">Startup</span>
    {
        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Initialize configuration.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"env"</span>&gt;The hosting environment.</span>
        <span class="pl-k">public</span> <span class="pl-e">Startup</span>(<span class="pl-en">IHostingEnvironment</span> <span class="pl-v">env</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">builder</span> = <span class="pl-k">new</span> <span class="pl-e">ConfigurationBuilder</span>()
                .<span class="pl-e">SetBasePath</span>(<span class="pl-v">env</span>.<span class="pl-e">ContentRootPath</span>)
                .<span class="pl-e">AddJsonFile</span>(<span class="pl-v">Program</span>.<span class="pl-e">Settings</span>, <span class="pl-v">optional</span>: <span class="pl-c1">false</span>)
                .<span class="pl-e">AddEnvironmentVariables</span>();

            <span class="pl-k">if</span> (<span class="pl-v">env</span>.<span class="pl-e">IsDevelopment</span>())
            {
                <span class="pl-v">builder</span>.<span class="pl-e">AddUserSecrets</span>();
            }

            <span class="pl-v">Configuration</span> = <span class="pl-v">builder</span>.<span class="pl-e">Build</span>();
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Gets the application configuration.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-k">public</span> <span class="pl-en">IConfigurationRoot</span> <span class="pl-v">Configuration</span> { <span class="pl-k">get</span>; }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the injection container.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"services"</span>&gt;The IoC container interface.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureServices</span>(<span class="pl-en">IServiceCollection</span> <span class="pl-v">services</span>)
        {
            <span class="pl-v">services</span>.<span class="pl-e">AddMvc</span>();
            <span class="pl-v">services</span>.<span class="pl-e">AddSession</span>();

            <span class="pl-v">services</span>.<span class="pl-e">AddOptions</span>();
            <span class="pl-v">services</span>.<span class="pl-e">AddSingleton</span><<span class="pl-en">IConfiguration</span>>(<span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>);

            <span class="pl-v">services</span>.<span class="pl-e">AddEntityFrameworkSqlite</span>()
                    .<span class="pl-e">AddDbContext</span><<span class="pl-en">Context</span>>();
            
            <span class="pl-v">services</span>.<span class="pl-e">AddIdentity</span><<span class="pl-en">User</span>, <span class="pl-en">IdentityRole</span>>(<span class="pl-v">options</span> =>
                    {
                        <span class="pl-v">options</span>.<span class="pl-e">User</span>.<span class="pl-e">AllowedUserNameCharacters</span> += <span class="pl-s">"="</span>;
                    })
                    .<span class="pl-e">AddEntityFrameworkStores</span><<span class="pl-en">Context</span>>()
                    .<span class="pl-e">AddDefaultTokenProviders</span>();

            <span class="pl-v">services</span>.<span class="pl-e">AddScoped</span>(<span class="pl-k">typeof</span>(<span class="pl-en">IDataStore</span>), <span class="pl-k">typeof</span>(<span class="pl-en">SiteDataStore</span>));
        }
        
        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the injected dependencies.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"env"</span>&gt;The hosting environment.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"loggerFactory"</span>&gt;The logger factory.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-e">Configure</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>, <span class="pl-en">IHostingEnvironment</span> <span class="pl-v">env</span>, <span class="pl-en">ILoggerFactory</span> <span class="pl-v">loggerFactory</span>)
        {
            <span class="pl-k">if</span> (<span class="pl-v">env</span>.<span class="pl-e">IsDevelopment</span>())
            {
                <span class="pl-c">// Enable logging.</span>
                <span class="pl-v">loggerFactory</span>.<span class="pl-e">AddConsole</span>(<span class="pl-v">Configuration</span>.<span class="pl-e">GetSection</span>(<span class="pl-s">"Logging"</span>));
                <span class="pl-v">loggerFactory</span>.<span class="pl-e">AddDebug</span>();

                <span class="pl-c">// Redirect routes that throw exceptions to developer error page.</span>
                <span class="pl-v">app</span>.<span class="pl-e">UseDeveloperExceptionPage</span>();

                <span class="pl-c">// Enable browser debugging connection.</span>
                <span class="pl-v">app</span>.<span class="pl-e">UseBrowserLink</span>();
            }
            <span class="pl-k">else</span>
            {
                <span class="pl-c">// Redirect routes that throws exceptions to production error page.</span>
                <span class="pl-v">app</span>.<span class="pl-e">UseExceptionHandler</span>(<span class="pl-s">"/Shared/Error"</span>);
            }
            
            <span class="pl-c">// Setup static resource routes.</span>
            <span class="pl-v">app</span>.<span class="pl-e">UseStaticFiles</span>();

            <span class="pl-c">// Setup identity.</span>
            <span class="pl-v">app</span>.<span class="pl-e">UseIdentity</span>();

            <span class="pl-c">// Setup sessions.</span>
            <span class="pl-v">app</span>.<span class="pl-e">UseSession</span>();

            <span class="pl-c">// Setup Yahoo authentication.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureYahooAuthentication</span>(<span class="pl-v">app</span>);

            <span class="pl-c">// Setup LinkedIn authentication.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureLinkedInAuthentication</span>(<span class="pl-v">app</span>);

            <span class="pl-c">// Setup Reddit authentication.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureRedditAuthentication</span>(<span class="pl-v">app</span>);

            <span class="pl-c">// Setup Microsoft authentication.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureMicrosoftAuthentication</span>(<span class="pl-v">app</span>);

            <span class="pl-c">// Setup Github authentication.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureGithubAuthentication</span>(<span class="pl-v">app</span>);

            <span class="pl-c">// Setup Google authentication.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureGoogleAuthentication</span>(<span class="pl-v">app</span>);

            <span class="pl-c">// Setup Twitter authentication.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureTwitterAuthentication</span>(<span class="pl-v">app</span>);

            <span class="pl-c">// Setup Facebook authentication.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureFacebookAuthentication</span>(<span class="pl-v">app</span>);

            <span class="pl-c">// Setup layout and partial routes.</span>
            <span class="pl-c1">this</span>.<span class="pl-e">ConfigureRoutes</span>(<span class="pl-v">app</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the application routing.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureRoutes</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-v">app</span>.<span class="pl-e">UseMvc</span>(<span class="pl-v">routes</span> =>
            {
                <span class="pl-c">// Default route redirects to Startup controller.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"default"</span>,
                    <span class="pl-v">template</span>: <span class="pl-k">string</span>.<span class="pl-e">Empty</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"Startup"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>
                    }
                );

                <span class="pl-c">// News Partial called by Angular template.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"news-view"</span>,
                    <span class="pl-v">template</span>: <span class="pl-s">"views/news/{id:int?}"</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"News"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>,
                        <span class="pl-v">id</span> = <span class="pl-c1">0</span>
                    }
                );

                <span class="pl-c">// News.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"news"</span>,
                    <span class="pl-v">template</span>: <span class="pl-s">"news"</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"Startup"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>
                    }
                );

                <span class="pl-c">// Articles Partial called by Angular template.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"articles-view"</span>,
                    <span class="pl-v">template</span>: <span class="pl-s">"views/articles"</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"Articles"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>
                    }
                );

                <span class="pl-c">// Articles.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"articles"</span>,
                    <span class="pl-v">template</span>: <span class="pl-s">"articles"</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"Startup"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>
                    }
                );

                <span class="pl-c">// Projects Partial called by Angular template.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"projects-view"</span>,
                    <span class="pl-v">template</span>: <span class="pl-s">"views/projects"</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"Projects"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>
                    }
                );

                <span class="pl-c">// Projects.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"projects"</span>,
                    <span class="pl-v">template</span>: <span class="pl-s">"projects"</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"Startup"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>
                    }
                );

                <span class="pl-c">// About Partial called by Angular template.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"about-view"</span>,
                    <span class="pl-v">template</span>: <span class="pl-s">"views/about"</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"About"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>
                    }
                );

                <span class="pl-c">// About.</span>
                <span class="pl-v">routes</span>.<span class="pl-e">MapRoute</span>(
                    <span class="pl-v">name</span>: <span class="pl-s">"about"</span>,
                    <span class="pl-v">template</span>: <span class="pl-s">"about"</span>,
                    <span class="pl-v">defaults</span>: <span class="pl-k">new</span>
                    {
                        <span class="pl-v">controller</span> = <span class="pl-s">"Startup"</span>,
                        <span class="pl-v">action</span> = <span class="pl-s">"Index"</span>
                    }
                );
            });
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the Yahoo external login provider.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureYahooAuthentication</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">yahooOptions</span> = <span class="pl-k">new</span> <span class="pl-e">YahooAuthenticationOptions</span>()
            {
                <span class="pl-v">ClientId</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"yahooId"</span>],
                <span class="pl-v">ClientSecret</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"yahooSecret"</span>]
            };

            <span class="pl-c">// Ensure secrets have been loaded.</span>
            <span class="pl-k">if</span> (<span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">yahooOptions</span>.<span class="pl-e">ClientId</span>) ||
                <span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">yahooOptions</span>.<span class="pl-e">ClientSecret</span>))
            {
                <span class="pl-k">return</span>;
            }

            <span class="pl-v">app</span>.<span class="pl-e">UseYahooAuthentication</span>(<span class="pl-v">yahooOptions</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the Reddit external login provider.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureRedditAuthentication</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">redditOptions</span> = <span class="pl-k">new</span> <span class="pl-e">RedditAuthenticationOptions</span>()
            {
                <span class="pl-v">ClientId</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"redditId"</span>],
                <span class="pl-v">ClientSecret</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"redditSecret"</span>]
            };

            <span class="pl-c">// Ensure secrets have been loaded.</span>
            <span class="pl-k">if</span> (<span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">redditOptions</span>.<span class="pl-e">ClientId</span>) ||
                <span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">redditOptions</span>.<span class="pl-e">ClientSecret</span>))
            {
                <span class="pl-k">return</span>;
            }

            <span class="pl-v">app</span>.<span class="pl-e">UseRedditAuthentication</span>(<span class="pl-v">redditOptions</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the LinkedIn external login provider.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureLinkedInAuthentication</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">linkedInOptions</span> = <span class="pl-k">new</span> <span class="pl-e">LinkedInAuthenticationOptions</span>()
            {
                <span class="pl-v">ClientId</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"linkedInId"</span>],
                <span class="pl-v">ClientSecret</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"linkedInSecret"</span>]
            };

            <span class="pl-c">// Ensure secrets have been loaded.</span>
            <span class="pl-k">if</span> (<span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">linkedInOptions</span>.<span class="pl-e">ClientId</span>) ||
                <span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">linkedInOptions</span>.<span class="pl-e">ClientSecret</span>))
            {
                <span class="pl-k">return</span>;
            }

            <span class="pl-v">app</span>.<span class="pl-e">UseLinkedInAuthentication</span>(<span class="pl-v">linkedInOptions</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the Google external login provider.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureGoogleAuthentication</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">googleOptions</span> = <span class="pl-k">new</span> <span class="pl-e">GoogleOptions</span>()
            {
                <span class="pl-v">ClientId</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"googleId"</span>],
                <span class="pl-v">ClientSecret</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"googleSecret"</span>]
            };

            <span class="pl-c">// Ensure secrets have been loaded.</span>
            <span class="pl-k">if</span> (<span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">googleOptions</span>.<span class="pl-e">ClientId</span>) ||
                <span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">googleOptions</span>.<span class="pl-e">ClientSecret</span>))
            {
                <span class="pl-k">return</span>;
            }

            <span class="pl-v">app</span>.<span class="pl-e">UseGoogleAuthentication</span>(<span class="pl-v">googleOptions</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the Github external login provider.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureGithubAuthentication</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">githubOptions</span> = <span class="pl-k">new</span> <span class="pl-en">GitHubAuthenticationOptions</span>
            {
                <span class="pl-v">ClientId</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"githubId"</span>],
                <span class="pl-v">ClientSecret</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"githubSecret"</span>],
                <span class="pl-v">Scope</span> = { <span class="pl-s">"user:login"</span> }
            };

            <span class="pl-c">// Ensure secrets have been loaded.</span>
            <span class="pl-k">if</span> (<span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">githubOptions</span>.<span class="pl-e">ClientId</span>) ||
                <span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">githubOptions</span>.<span class="pl-e">ClientSecret</span>))
            {
                <span class="pl-k">return</span>;
            }

            <span class="pl-v">app</span>.<span class="pl-e">UseGitHubAuthentication</span>(<span class="pl-v">githubOptions</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the Microsoft external login provider.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureMicrosoftAuthentication</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">microsoftOptions</span> = <span class="pl-k">new</span> <span class="pl-e">MicrosoftAccountOptions</span>()
            {
                <span class="pl-v">ClientId</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"microsoftId"</span>],
                <span class="pl-v">ClientSecret</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"microsoftSecret"</span>]
            };

            <span class="pl-c">// Ensure secrets have been loaded.</span>
            <span class="pl-k">if</span> (<span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">microsoftOptions</span>.<span class="pl-e">ClientId</span>) ||
                <span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">microsoftOptions</span>.<span class="pl-e">ClientSecret</span>))
            {
                <span class="pl-k">return</span>;
            }

            <span class="pl-v">app</span>.<span class="pl-e">UseMicrosoftAccountAuthentication</span>(<span class="pl-v">microsoftOptions</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the Twitter external login provider.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureTwitterAuthentication</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">twitterOptions</span> = <span class="pl-k">new</span> <span class="pl-e">TwitterOptions</span>()
            {
                <span class="pl-v">ConsumerKey</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"twitterId"</span>],
                <span class="pl-v">ConsumerSecret</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"twitterSecret"</span>]
            };

            <span class="pl-c">// Ensure secrets have been loaded.</span>
            <span class="pl-k">if</span> (<span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">twitterOptions</span>.<span class="pl-e">ConsumerKey</span>) ||
                <span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">twitterOptions</span>.<span class="pl-e">ConsumerSecret</span>))
            {
                <span class="pl-k">return</span>;
            }

            <span class="pl-v">app</span>.<span class="pl-e">UseTwitterAuthentication</span>(<span class="pl-v">twitterOptions</span>);
        }

        <span class="pl-c">/// &lt;<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// Configures the Faceboook external login provider.</span>
        <span class="pl-c">/// &lt;/<span class="pl-ent">summary</span>&gt;</span>
        <span class="pl-c">/// &lt;<span class="pl-ent">param</span> <span class="pl-e">name</span>=<span class="pl-s">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent">param</span>&gt;</span>
        <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-e">ConfigureFacebookAuthentication</span>(<span class="pl-en">IApplicationBuilder</span> <span class="pl-v">app</span>)
        {
            <span class="pl-k">var</span> <span class="pl-v">facebookOptions</span> = <span class="pl-k">new</span> <span class="pl-e">FacebookOptions</span>()
            {
                <span class="pl-v">AppId</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"facebookId"</span>],
                <span class="pl-v">AppSecret</span> = <span class="pl-c1">this</span>.<span class="pl-v">Configuration</span>[<span class="pl-s">"facebookSecret"</span>],

                <span class="pl-c">// Use popup style for the challenge page.</span>
                <span class="pl-v">Events</span> = <span class="pl-k">new</span> <span class="pl-e">OAuthEvents</span>()
                {
                    <span class="pl-v">OnRedirectToAuthorizationEndpoint</span> = (<span class="pl-v">originalContext</span>) =>
                    {
                        <span class="pl-k">var</span> <span class="pl-v">context</span> = <span class="pl-k">new</span> <span class="pl-e">OAuthRedirectToAuthorizationContext</span>(
                            <span class="pl-v">originalContext</span>.<span class="pl-e">HttpContext</span>,
                            <span class="pl-v">originalContext</span>.<span class="pl-e">Options</span>,
                            <span class="pl-v">originalContext</span>.<span class="pl-e">Properties</span>,
                            <span class="pl-k">string</span>.<span class="pl-e">Format</span>(<span class="pl-s">"{0}&display=popup"</span>, <span class="pl-v">originalContext</span>.<span class="pl-e">RedirectUri</span>));
                        
                        <span class="pl-v">context</span>.<span class="pl-e">Response</span>.<span class="pl-e">Redirect</span>(<span class="pl-v">context</span>.<span class="pl-e">RedirectUri</span>);
                        <span class="pl-k">return</span> <span class="pl-v">System</span>.<span class="pl-e">Threading</span>.<span class="pl-e">Tasks</span>.<span class="pl-e">Task</span>.<span class="pl-e">FromResult</span>(<span class="pl-c1">0</span>);
                    }
                }
            };

            <span class="pl-c">// Ensure secrets have been loaded.</span>
            <span class="pl-k">if</span> (<span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">facebookOptions</span>.<span class="pl-e">AppId</span>) ||
                <span class="pl-k">string</span>.<span class="pl-e">IsNullOrEmpty</span>(<span class="pl-v">facebookOptions</span>.<span class="pl-e">AppSecret</span>))
            {
                <span class="pl-k">return</span>;
            }

            <span class="pl-c">// Request only the public profile.</span>
            <span class="pl-v">facebookOptions</span>.<span class="pl-e">Scope</span>.<span class="pl-e">Clear</span>();
            <span class="pl-v">facebookOptions</span>.<span class="pl-e">Scope</span>.<span class="pl-e">Add</span>(<span class="pl-s">"public_profile"</span>);

            <span class="pl-c">// Request only the name claim.</span>
            <span class="pl-v">facebookOptions</span>.<span class="pl-e">Fields</span>.<span class="pl-e">Clear</span>();
            <span class="pl-v">facebookOptions</span>.<span class="pl-e">Fields</span>.<span class="pl-e">Add</span>(<span class="pl-s">"name"</span>);

            <span class="pl-v">app</span>.<span class="pl-e">UseFacebookAuthentication</span>(<span class="pl-v">facebookOptions</span>);
        }
    }
}