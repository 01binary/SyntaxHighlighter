<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">System</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">System</span>.<span class="pl-e" data-transform="Member Entities">Collections</span>.<span class="pl-e" data-transform="Member Entities">Generic</span>;

<span class="pl-k" data-transform="Keywords">namespace</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">Shadowsocks</span>.<span class="pl-e" data-transform="Member Entities">Encryption</span>
{
    <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">class</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">SodiumEncryptor</span>
        : <span class="pl-en" data-transform="Entity Names">IVEncryptor</span>, <span class="pl-v" data-transform="Variables">IDisposable</span>
    {
        <span class="pl-k" data-transform="Keywords">const</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">CIPHER_SALSA20</span> = <span class="pl-c1" data-transform="Numbers">1</span>;
        <span class="pl-k" data-transform="Keywords">const</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">CIPHER_CHACHA20</span> = <span class="pl-c1" data-transform="Numbers">2</span>;
        <span class="pl-k" data-transform="Keywords">const</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">CIPHER_CHACHA20_IETF</span> = <span class="pl-c1" data-transform="Numbers">3</span>;

        <span class="pl-k" data-transform="Keywords">const</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">SODIUM_BLOCK_SIZE</span> = <span class="pl-c1" data-transform="Numbers">64</span>;

        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">_encryptBytesRemaining</span>;
        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">_decryptBytesRemaining</span>;
        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">ulong</span> <span class="pl-v" data-transform="Variables">_encryptIC</span>;
        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">ulong</span> <span class="pl-v" data-transform="Variables">_decryptIC</span>;
        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">byte</span>[] <span class="pl-v" data-transform="Variables">_encryptBuf</span>;
        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">byte</span>[] <span class="pl-v" data-transform="Variables">_decryptBuf</span>;

        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">SodiumEncryptor</span>(<span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">method</span>, <span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">password</span>, <span class="pl-k" data-transform="Keywords">bool</span> <span class="pl-v" data-transform="Variables">onetimeauth</span>, <span class="pl-k" data-transform="Keywords">bool</span> <span class="pl-v" data-transform="Variables">isudp</span>)
            : <span class="pl-k" data-transform="Keywords">base</span>(<span class="pl-v" data-transform="Variables">method</span>, <span class="pl-v" data-transform="Variables">password</span>, <span class="pl-v" data-transform="Variables">onetimeauth</span>, <span class="pl-v" data-transform="Variables">isudp</span>)
        {
            <span class="pl-v" data-transform="Variables">_encryptBuf</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-k" data-transform="Keywords">byte</span>[<span class="pl-v" data-transform="Variables">MAX_INPUT_SIZE</span> + <span class="pl-v" data-transform="Variables">SODIUM_BLOCK_SIZE</span>];
            <span class="pl-v" data-transform="Variables">_decryptBuf</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-k" data-transform="Keywords">byte</span>[<span class="pl-v" data-transform="Variables">MAX_INPUT_SIZE</span> + <span class="pl-v" data-transform="Variables">SODIUM_BLOCK_SIZE</span>];
        }

        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">static</span> <span class="pl-en" data-transform="Exclusive Entity Names">Dictionary</span><<span class="pl-k" data-transform="Keywords">string</span>, <span class="pl-v" data-transform="Variables">EncryptorInfo</span>> <span class="pl-v" data-transform="Variables">_ciphers</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-en" data-transform="Entity Names">Dictionary</span><<span class="pl-k" data-transform="Keywords">string</span>, <span class="pl-v" data-transform="Variables">EncryptorInfo</span>> {
            { <span class="pl-s" data-transform="Strings">"salsa20"</span>, <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">EncryptorInfo</span>(<span class="pl-c1" data-transform="Numbers">32</span>, <span class="pl-c1" data-transform="Numbers">8</span>, <span class="pl-v" data-transform="Variables">CIPHER_SALSA20</span>) },
            { <span class="pl-s" data-transform="Strings">"chacha20"</span>, <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">EncryptorInfo</span>(<span class="pl-c1" data-transform="Numbers">32</span>, <span class="pl-c1" data-transform="Numbers">8</span>, <span class="pl-v" data-transform="Variables">CIPHER_CHACHA20</span>) },
            { <span class="pl-s" data-transform="Strings">"chacha20-ietf"</span>, <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">EncryptorInfo</span>(<span class="pl-c1" data-transform="Numbers">32</span>, <span class="pl-c1" data-transform="Numbers">12</span>, <span class="pl-v" data-transform="Variables">CIPHER_CHACHA20_IETF</span>) }
        };

        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">override</span> <span class="pl-v" data-transform="Variables">Dictionary</span><<span class="pl-k" data-transform="Keywords">string</span>, <span class="pl-v" data-transform="Variables">EncryptorInfo</span>> <span class="pl-e" data-transform="Call Entities">getCiphers</span>()
        {
            <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-v" data-transform="Variables">_ciphers</span>;
        }

        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">static</span> <span class="pl-en" data-transform="Exclusive Entity Names">List</span><<span class="pl-k" data-transform="Keywords">string</span>> <span class="pl-e" data-transform="Call Entities">SupportedCiphers</span>()
        {
            <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-en" data-transform="Entity Names">List</span><<span class="pl-k" data-transform="Keywords">string</span>>(<span class="pl-v" data-transform="Variables">_ciphers</span>.<span class="pl-e" data-transform="Member Entities">Keys</span>);
        }

        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">override</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">cipherUpdate</span>(<span class="pl-k" data-transform="Keywords">bool</span> <span class="pl-v" data-transform="Variables">isCipher</span>, <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">length</span>, <span class="pl-k" data-transform="Keywords">byte</span>[] <span class="pl-v" data-transform="Variables">buf</span>, <span class="pl-k" data-transform="Keywords">byte</span>[] <span class="pl-v" data-transform="Variables">outbuf</span>)
        {
            <span class="pl-c" data-transform="Comments">// TODO write a unidirection cipher so we don't have to if if if</span>
            <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">bytesRemaining</span>;
            <span class="pl-k" data-transform="Keywords">ulong</span> <span class="pl-v" data-transform="Variables">ic</span>;
            <span class="pl-k" data-transform="Keywords">byte</span>[] <span class="pl-v" data-transform="Variables">sodiumBuf</span>;
            <span class="pl-k" data-transform="Keywords">byte</span>[] <span class="pl-v" data-transform="Variables">iv</span>;

            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">isCipher</span>)
            {
                <span class="pl-v" data-transform="Variables">bytesRemaining</span> = <span class="pl-v" data-transform="Variables">_encryptBytesRemaining</span>;
                <span class="pl-v" data-transform="Variables">ic</span> = <span class="pl-v" data-transform="Variables">_encryptIC</span>;
                <span class="pl-v" data-transform="Variables">sodiumBuf</span> = <span class="pl-v" data-transform="Variables">_encryptBuf</span>;
                <span class="pl-v" data-transform="Variables">iv</span> = <span class="pl-v" data-transform="Variables">_encryptIV</span>;
            }
            <span class="pl-k" data-transform="Keywords">else</span>
            {
                <span class="pl-v" data-transform="Variables">bytesRemaining</span> = <span class="pl-v" data-transform="Variables">_decryptBytesRemaining</span>;
                <span class="pl-v" data-transform="Variables">ic</span> = <span class="pl-v" data-transform="Variables">_decryptIC</span>;
                <span class="pl-v" data-transform="Variables">sodiumBuf</span> = <span class="pl-v" data-transform="Variables">_decryptBuf</span>;
                <span class="pl-v" data-transform="Variables">iv</span> = <span class="pl-v" data-transform="Variables">_decryptIV</span>;
            }
            <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">padding</span> = <span class="pl-v" data-transform="Variables">bytesRemaining</span>;
            <span class="pl-v" data-transform="Variables">Buffer</span>.<span class="pl-e" data-transform="Member Entities">BlockCopy</span>(<span class="pl-v" data-transform="Variables">buf</span>, <span class="pl-c1" data-transform="Numbers">0</span>, <span class="pl-v" data-transform="Variables">sodiumBuf</span>, <span class="pl-v" data-transform="Variables">padding</span>, <span class="pl-v" data-transform="Variables">length</span>);

            <span class="pl-k" data-transform="Keywords">switch</span> (<span class="pl-v" data-transform="Variables">_cipher</span>)
            {
                <span class="pl-k" data-transform="Keywords">case</span> <span class="pl-c1" data-transform="Constant Identifiers">CIPHER_SALSA20</span>:
                    <span class="pl-v" data-transform="Variables">Sodium</span>.<span class="pl-e" data-transform="Member Entities">crypto_stream_salsa20_xor_ic</span>(<span class="pl-v" data-transform="Variables">sodiumBuf</span>, <span class="pl-v" data-transform="Variables">sodiumBuf</span>, (<span class="pl-k" data-transform="Keywords">ulong</span>)(<span class="pl-v" data-transform="Variables">padding</span> + <span class="pl-v" data-transform="Variables">length</span>), <span class="pl-v" data-transform="Variables">iv</span>, <span class="pl-v" data-transform="Variables">ic</span>, <span class="pl-v" data-transform="Variables">_key</span>);
                    <span class="pl-k" data-transform="Keywords">break</span>;
                <span class="pl-k" data-transform="Keywords">case</span> <span class="pl-c1" data-transform="Constant Identifiers">CIPHER_CHACHA20</span>:
                    <span class="pl-v" data-transform="Variables">Sodium</span>.<span class="pl-e" data-transform="Member Entities">crypto_stream_chacha20_xor_ic</span>(<span class="pl-v" data-transform="Variables">sodiumBuf</span>, <span class="pl-v" data-transform="Variables">sodiumBuf</span>, (<span class="pl-k" data-transform="Keywords">ulong</span>)(<span class="pl-v" data-transform="Variables">padding</span> + <span class="pl-v" data-transform="Variables">length</span>), <span class="pl-v" data-transform="Variables">iv</span>, <span class="pl-v" data-transform="Variables">ic</span>, <span class="pl-v" data-transform="Variables">_key</span>);
                    <span class="pl-k" data-transform="Keywords">break</span>;
                <span class="pl-k" data-transform="Keywords">case</span> <span class="pl-c1" data-transform="Constant Identifiers">CIPHER_CHACHA20_IETF</span>:
                    <span class="pl-v" data-transform="Variables">Sodium</span>.<span class="pl-e" data-transform="Member Entities">crypto_stream_chacha20_ietf_xor_ic</span>(<span class="pl-v" data-transform="Variables">sodiumBuf</span>, <span class="pl-v" data-transform="Variables">sodiumBuf</span>, (<span class="pl-k" data-transform="Keywords">ulong</span>)(<span class="pl-v" data-transform="Variables">padding</span> + <span class="pl-v" data-transform="Variables">length</span>), <span class="pl-v" data-transform="Variables">iv</span>, (<span class="pl-k" data-transform="Keywords">uint</span>)<span class="pl-v" data-transform="Variables">ic</span>, <span class="pl-v" data-transform="Variables">_key</span>);
                    <span class="pl-k" data-transform="Keywords">break</span>;
            }
            <span class="pl-v" data-transform="Variables">Buffer</span>.<span class="pl-e" data-transform="Member Entities">BlockCopy</span>(<span class="pl-v" data-transform="Variables">sodiumBuf</span>, <span class="pl-v" data-transform="Variables">padding</span>, <span class="pl-v" data-transform="Variables">outbuf</span>, <span class="pl-c1" data-transform="Numbers">0</span>, <span class="pl-v" data-transform="Variables">length</span>);
            <span class="pl-v" data-transform="Variables">padding</span> += <span class="pl-v" data-transform="Variables">length</span>;
            ic += (<span class="pl-k" data-transform="Keywords">ulong</span>)<span class="pl-v" data-transform="Variables">padding</span> / <span class="pl-v" data-transform="Variables">SODIUM_BLOCK_SIZE</span>;
            <span class="pl-v" data-transform="Variables">bytesRemaining</span> = <span class="pl-v" data-transform="Variables">padding</span> % <span class="pl-v" data-transform="Variables">SODIUM_BLOCK_SIZE</span>;

            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">isCipher</span>)
            {
                <span class="pl-v" data-transform="Variables">_encryptBytesRemaining</span> = <span class="pl-v" data-transform="Variables">bytesRemaining</span>;
                <span class="pl-v" data-transform="Variables">_encryptIC</span> = <span class="pl-v" data-transform="Variables">ic</span>;
            }
            <span class="pl-k" data-transform="Keywords">else</span>
            {
                <span class="pl-v" data-transform="Variables">_decryptBytesRemaining</span> = <span class="pl-v" data-transform="Variables">bytesRemaining</span>;
                <span class="pl-v" data-transform="Variables">_decryptIC</span> = <span class="pl-v" data-transform="Variables">ic</span>;
            }
        }

        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">override</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">Dispose</span>()
        {
        }
    }
}

<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">UnityEditor</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">UnityEngine</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">UnityEngine</span>.<span class="pl-e" data-transform="Member Entities">VR</span>.<span class="pl-e" data-transform="Member Entities">Utilities</span>;

[<span class="pl-e" data-transform="Call Entities">CustomPropertyDrawer</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">FlagsPropertyAttribute</span>))]
<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">class</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">FlagsPropertyDrawer</span> : <span class="pl-en" data-transform="Entity Names">PropertyDrawer</span>
{
	<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">override</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">OnGUI</span>(<span class="pl-en" data-transform="Exclusive Entity Names">Rect</span> <span class="pl-v" data-transform="Variables">position</span>, <span class="pl-en" data-transform="Exclusive Entity Names">SerializedProperty</span> <span class="pl-v" data-transform="Variables">property</span>, <span class="pl-en" data-transform="Exclusive Entity Names">GUIContent</span> <span class="pl-v" data-transform="Variables">label</span>)
	{
		<span class="pl-v" data-transform="Variables">property</span>.<span class="pl-e" data-transform="Member Entities">intValue</span> = <span class="pl-v" data-transform="Variables">U</span>.<span class="pl-e" data-transform="Member Entities">UI</span>.<span class="pl-e" data-transform="Member Entities">MaskField</span>(<span class="pl-v" data-transform="Variables">position</span>, <span class="pl-v" data-transform="Variables">label</span>, <span class="pl-v" data-transform="Variables">property</span>.<span class="pl-e" data-transform="Member Entities">intValue</span>, <span class="pl-v" data-transform="Variables">property</span>.<span class="pl-e" data-transform="Member Entities">enumNames</span>, <span class="pl-v" data-transform="Variables">U</span>.<span class="pl-e" data-transform="Member Entities">UI</span>.<span class="pl-e" data-transform="Member Entities">SerializedPropertyToType</span>(<span class="pl-v" data-transform="Variables">property</span>));
	}
}

[<span class="pl-e" data-transform="Call Entities">CustomEditor</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">RaySlider</span>))]
<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">class</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">RaySliderEditor</span> : <span class="pl-en" data-transform="Entity Names">SliderEditor</span>
{
	<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">override</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">OnInspectorGUI</span>()
	{
		<span class="pl-v" data-transform="Variables">serializedObject</span>.<span class="pl-e" data-transform="Member Entities">Update</span>();
		<span class="pl-v" data-transform="Variables">EditorGUILayout</span>.<span class="pl-e" data-transform="Member Entities">PropertyField</span>(<span class="pl-v" data-transform="Variables">serializedObject</span>.<span class="pl-e" data-transform="Member Entities">FindProperty</span>(<span class="pl-s" data-transform="Strings">"m_SelectionFlags"</span>));
		<span class="pl-v" data-transform="Variables">serializedObject</span>.<span class="pl-e" data-transform="Member Entities">ApplyModifiedProperties</span>();
		<span class="pl-k" data-transform="Keywords">base</span>.<span class="pl-e" data-transform="Member Entities">OnInspectorGUI</span>();
	}
}

<span class="pl-k" data-transform="Keywords">namespace</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">UnityEngine</span>.<span class="pl-e" data-transform="Member Entities">InputNew</span>
{
	<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">class</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">ShowMenu</span> : <span class="pl-en" data-transform="Entity Names">ActionMapInput</span> {
		<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">ShowMenu</span> (<span class="pl-en" data-transform="Exclusive Entity Names">ActionMap</span> <span class="pl-v" data-transform="Variables">actionMap</span>) : <span class="pl-k" data-transform="Keywords">base</span> (<span class="pl-v" data-transform="Variables">actionMap</span>) { }
		
		<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-en" data-transform="Exclusive Entity Names">ButtonInputControl</span> @<span class="pl-v" data-transform="Variables">show</span> { <span class="pl-k" data-transform="Keywords">get</span> { <span class="pl-k" data-transform="Keywords">return</span> (<span class="pl-v" data-transform="Variables">ButtonInputControl</span>)<span class="pl-c1" data-transform="Constant Literals">this</span>[<span class="pl-v" data-transform="Variables">0</span>]; } }
	}
}

<span class="pl-k" data-transform="Keywords">namespace</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">System</span>.<span class="pl-e" data-transform="Member Entities">Collections</span>.<span class="pl-e" data-transform="Member Entities">Concurrent</span>
{
    <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
    <span class="pl-c" data-transform="Comments">/// Represents a thread-safe hash-based unique collection.</span>
    <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
    <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">typeparam</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"T"</span>&gt;The type of the items in the collection.&lt;/<span class="pl-ent" data-transform="Comment Entities">typeparam</span>&gt;</span>
    <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">remarks</span>&gt;</span>
    <span class="pl-c" data-transform="Comments">/// All public members of &lt;<span class="pl-ent" data-transform="Comment Entities">see</span> <span class="pl-e" data-transform="Comment Attributes">cref</span>="ConcurrentHashSet{T}"/&gt; are thread-safe and may be used</span>
    <span class="pl-c" data-transform="Comments">/// concurrently from multiple threads.</span>
    <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">remarks</span>&gt;</span>
    [<span class="pl-e" data-transform="Call Entities">DebuggerDisplay</span>(<span class="pl-s" data-transform="Strings">"Count = {Count}"</span>)]
    <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">sealed</span> <span class="pl-k" data-transform="Keywords">class</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">ConcurrentHashSet</span><<span class="pl-en" data-transform="Entity Names">T</span>> : <span class="pl-en" data-transform="Entity Names">IReadOnlyCollection</span><<span class="pl-en" data-transform="Entity Names">T</span>>, <span class="pl-v" data-transform="Variables">ICollection</span><<span class="pl-en" data-transform="Entity Names">T</span>>
    {
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">const</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">DefaultCapacity</span> = <span class="pl-c1" data-transform="Numbers">31</span>;
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">const</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">MaxLockNumber</span> = <span class="pl-c1" data-transform="Numbers">1024</span>;

        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">readonly</span> <span class="pl-v" data-transform="Variables">IEqualityComparer</span><<span class="pl-en" data-transform="Entity Names">T</span>> <span class="pl-v" data-transform="Variables">_comparer</span>;
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">readonly</span> <span class="pl-k" data-transform="Keywords">bool</span> <span class="pl-v" data-transform="Variables">_growLockArray</span>;

        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">_budget</span>;
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">volatile</span> <span class="pl-v" data-transform="Variables">Tables</span> <span class="pl-v" data-transform="Variables">_tables</span>;

        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">static</span> <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">DefaultConcurrencyLevel</span> => <span class="pl-v" data-transform="Variables">PlatformHelper</span>.<span class="pl-e" data-transform="Member Entities">ProcessorCount</span>;
	}
}

<span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
<span class="pl-c" data-transform="Comments">/// Gets the news stories.</span>
<span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-en" data-transform="Exclusive Entity Names">IActionResult</span> <span class="pl-e" data-transform="Call Entities">GetStories</span>()
{
    <span class="pl-k" data-transform="Keywords">try</span>
    {
        <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span> <span class="pl-v" data-transform="Variables">store</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">GetService</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">IDataStore</span>)) <span class="pl-k" data-transform="Keywords">as</span> <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span>;
        <span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">excludeTag</span> = <span class="pl-v" data-transform="Variables">Tags</span>.<span class="pl-e" data-transform="Member Entities">Story</span>.<span class="pl-e" data-transform="Member Entities">ToString</span>().<span class="pl-e" data-transform="Member Entities">ToLower</span>();

        <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">Json</span>(
            <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">GetArticles</span>(<span class="pl-v" data-transform="Variables">Tags</span>.<span class="pl-e" data-transform="Member Entities">Story</span>).<span class="pl-e" data-transform="Member Entities">Select</span>(<span class="pl-v" data-transform="Variables">story</span> => <span class="pl-k" data-transform="Keywords">new</span>
            {
                <span class="pl-v" data-transform="Variables">id</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Id</span>,
                <span class="pl-v" data-transform="Variables">title</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Title</span>,
                <span class="pl-v" data-transform="Variables">date</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Date</span>,
                <span class="pl-v" data-transform="Variables">author</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Author</span>.<span class="pl-e" data-transform="Member Entities">Name</span>,
                <span class="pl-v" data-transform="Variables">tags</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Metadata</span>.<span class="pl-e" data-transform="Member Entities">Where</span>(<span class="pl-v" data-transform="Variables">metadata</span> => <span class="pl-v" data-transform="Variables">metadata</span>.<span class="pl-e" data-transform="Member Entities">Tag</span>.<span class="pl-e" data-transform="Member Entities">Name</span>.<span class="pl-e" data-transform="Member Entities">ToLower</span>() != <span class="pl-v" data-transform="Variables">excludeTag</span>)
                                    .<span class="pl-e" data-transform="Member Entities">Select</span>(<span class="pl-v" data-transform="Variables">metadata</span> => <span class="pl-v" data-transform="Variables">metadata</span>.<span class="pl-e" data-transform="Member Entities">Tag</span>.<span class="pl-e" data-transform="Member Entities">Name</span>),
                <span class="pl-v" data-transform="Variables">content</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Content</span>
            }).<span class="pl-e" data-transform="Member Entities">ToArray</span>().<span class="pl-e" data-transform="Member Entities">Select</span>(<span class="pl-v" data-transform="Variables">result</span> => <span class="pl-k" data-transform="Keywords">new</span>
            {
                <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">id</span>,
                <span class="pl-v" data-transform="Variables">title</span> = <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">title</span>,
                <span class="pl-v" data-transform="Variables">date</span> = <span class="pl-v" data-transform="Variables">Shared</span>.<span class="pl-e" data-transform="Member Entities">FormatDate</span>(<span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">date</span>),
                <span class="pl-v" data-transform="Variables">author</span> = <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">author</span>,
                <span class="pl-v" data-transform="Variables">tags</span> = <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">tags</span>.<span class="pl-e" data-transform="Member Entities">Select</span>(<span class="pl-v" data-transform="Variables">tagName</span> => <span class="pl-v" data-transform="Variables">Shared</span>.<span class="pl-e" data-transform="Member Entities">FormatTag</span>(<span class="pl-v" data-transform="Variables">tagName</span>)),
                <span class="pl-v" data-transform="Variables">content</span> = <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">content</span>
            }));
    }
    <span class="pl-k" data-transform="Keywords">catch</span>
    {
        <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">StatusCode</span>(<span class="pl-c1" data-transform="Numbers">500</span>);
    }
}

<span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
<span class="pl-c" data-transform="Comments">/// Star a news story.</span>
<span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
<span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"id"</span>&gt;The story id&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
[<span class="pl-e" data-transform="Call Entities">HttpPost</span>(<span class="pl-s" data-transform="Strings">"star/{id}"</span>)]
<span class="pl-k" data-transform="Keywords">public</span> <span class="pl-en" data-transform="Exclusive Entity Names">IActionResult</span> <span class="pl-e" data-transform="Call Entities">StarStory</span>(<span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">id</span>)
{
    <span class="pl-k" data-transform="Keywords">try</span>
    {
        <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span> <span class="pl-v" data-transform="Variables">store</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">GetService</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">IDataStore</span>)) <span class="pl-k" data-transform="Keywords">as</span> <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span>;
        <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">story</span> = <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">GetArticle</span>(<span class="pl-v" data-transform="Variables">id</span>);

        <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">story</span> == <span class="pl-c1" data-transform="Constant Literals">null</span>)
        {
            <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">NotFound</span>();
        }

        <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">storyStars</span> = <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">GetArticleStars</span>(<span class="pl-v" data-transform="Variables">id</span>);
        <span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">excludeIpAddress</span> = <span class="pl-v" data-transform="Variables">Shared</span>.<span class="pl-e" data-transform="Member Entities">GetRequestIpAddress</span>(<span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Request</span>);

        <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">storyStars</span>.<span class="pl-e" data-transform="Member Entities">Any</span>(<span class="pl-v" data-transform="Variables">star</span> => <span class="pl-v" data-transform="Variables">star</span>.<span class="pl-e" data-transform="Member Entities">IpAddress</span> == <span class="pl-v" data-transform="Variables">excludeIpAddress</span>))
        {
            <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">BadRequest</span>();
        }

        <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Stars</span>.<span class="pl-e" data-transform="Member Entities">Add</span>(<span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">Star</span>(<span class="pl-v" data-transform="Variables">story</span>, <span class="pl-v" data-transform="Variables">excludeIpAddress</span>));
        <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">Save</span>();

        <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">Ok</span>(<span class="pl-k" data-transform="Keywords">new</span> { <span class="pl-v" data-transform="Variables">stars</span> = <span class="pl-v" data-transform="Variables">storyStars</span>.<span class="pl-e" data-transform="Member Entities">Count</span>() });
    }
    <span class="pl-k" data-transform="Keywords">catch</span>
    {
        <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">StatusCode</span>(<span class="pl-c1" data-transform="Numbers">500</span>);
    }
}

<span class="pl-c" data-transform="Comments">/*--------------------------------------------------------*\
|   ______    __   |
|  |  __  |  |  |  |
|  | |  | |  |  |  |
|  | !__! |  |  |  |
|  !______!  !__!  |  binary : tech art
|
|  Defines the News Endpoint.
|----------------------------------------------------------
|  Copyright(C) 2016 Valeriy Novytskyy
\*---------------------------------------------------------*/</span>

<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">System</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">System</span>.<span class="pl-e" data-transform="Member Entities">Linq</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">AspNetCore</span>.<span class="pl-e" data-transform="Member Entities">Mvc</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">ZeroWeb</span>.<span class="pl-e" data-transform="Member Entities">Models</span>;

<span class="pl-k" data-transform="Keywords">const</span> <span class="pl-k" data-transform="Keywords">bool</span> <span class="pl-v" data-transform="Variables">myvar</span> = <span class="pl-c1" data-transform="Constant Literals">false</span>;

<span class="pl-c" data-transform="Comments">/*
&lt;<span class="pl-ent" data-transform="Comment Entities">CommentList</span>/&gt;
&lt;<span class="pl-ent" data-transform="Comment Entities">UserList</span> /&gt;

&lt;<span class="pl-ent" data-transform="Comment Entities">SomeTag</span>&gt;
	&lt;<span class="pl-ent" data-transform="Comment Entities">ChildTag</span>&gt;
		&lt;<span class="pl-ent" data-transform="Comment Entities">Child</span> /&gt;
	&lt;/<span class="pl-ent" data-transform="Comment Entities">ChildTag</span>&gt;
&lt;/<span class="pl-ent" data-transform="Comment Entities">SomeTag</span>&gt;

&lt;<span class="pl-ent" data-transform="Comment Entities">WithAttribute</span> <span class="pl-e" data-transform="Comment Attributes">One</span>=<span class="pl-s" data-transform="Comment Attribute Values">"hello"</span> <span class="pl-e" data-transform="Comment Attributes">Two</span>=<span class="pl-s" data-transform="Comment Attribute Values">"world"</span>/&gt;
*/</span>

<span class="pl-k" data-transform="Keywords">namespace</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">ZeroWeb</span>.<span class="pl-e" data-transform="Member Entities">Api</span>
{
    <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
    <span class="pl-c" data-transform="Comments">/// The News Endpoint.</span>
    <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
    [<span class="pl-e" data-transform="Call Entities">Route</span>(<span class="pl-s" data-transform="Strings">"api/news"</span>)]
    <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">class</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">NewsController</span>: <span class="pl-en" data-transform="Entity Names">Controller</span>
    {
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// The site data store.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-v" data-transform="Variables">IServiceProvider</span> <span class="pl-v" data-transform="Variables">services</span>;
		<span class="pl-en" data-transform="Exclusive Entity Names">AnotherType</span> <span class="pl-v" data-transform="Variables">more</span>;
		<span class="pl-en" data-transform="Exclusive Entity Names">OneMoreType</span> <span class="pl-v" data-transform="Variables">evenMore</span>;
		<span class="pl-en" data-transform="Exclusive Entity Names">HelloWorld</span> <span class="pl-v" data-transform="Variables">goodbye</span>;
		<span class="pl-en" data-transform="Exclusive Entity Names">IHome</span> <span class="pl-v" data-transform="Variables">world</span>;

		<span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">const</span> <span class="pl-c1" data-transform="Constant Identifiers">mustBeConst</span> = <span class="pl-c1" data-transform="Numbers">3</span> > <span class="pl-c1" data-transform="Numbers">5</span>;

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Initializes a new instance of the &lt;<span class="pl-ent" data-transform="Comment Entities">see</span> <span class="pl-e" data-transform="Comment Attributes">cref</span>=<span class="pl-s" data-transform="Comment Attribute Values">"NewsController"</span>/&gt; class.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"services"</span>&gt;The application container.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">NewsController</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IServiceProvider</span> <span class="pl-v" data-transform="Variables">services</span>)
        {
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">services</span> = <span class="pl-v" data-transform="Variables">services</span>;

			<span class="pl-c1" data-transform="Constant Literals">this</span>
				.<span class="pl-e" data-transform="Member Entities">property</span> = <span class="pl-v" data-transform="Variables">value</span>;

			<span class="pl-v" data-transform="Variables">another</span>
				.<span class="pl-e" data-transform="Member Entities">property</span> = <span class="pl-s" data-transform="Strings">"goodbye"</span>;

			<span class="pl-v" data-transform="Variables">MyConsole</span>.<span class="pl-e" data-transform="Member Entities">WriteLine</span>();

			<span class="pl-en" data-transform="Exclusive Entity Names">MyFunc</span><<span class="pl-k" data-transform="Keywords">string</span>> <span class="pl-v" data-transform="Variables">test</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">test</span>();
			<span class="pl-en" data-transform="Exclusive Entity Names">MyFunc</span><<span class="pl-en" data-transform="Entity Names">ICat</span>> <span class="pl-v" data-transform="Variables">testing</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">testing</span>();

			<span class="pl-k" data-transform="Keywords">const</span> <span class="pl-c1" data-transform="Constant Identifiers">whatever</span> = <span class="pl-s" data-transform="Strings">"testing"</span>;

			<span class="pl-c1" data-transform="Constant Literals">Console</span>.<span class="pl-e" data-transform="Call Entities">WriteLine</span>(<span class="pl-s" data-transform="Strings">"lazy fox"</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Gets the news stories.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-en" data-transform="Exclusive Entity Names">IActionResult</span> <span class="pl-e" data-transform="Call Entities">GetStories</span>()
        {
            <span class="pl-k" data-transform="Keywords">try</span>
            {
                <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span> <span class="pl-v" data-transform="Variables">store</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">GetService</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">IDataStore</span>)) <span class="pl-k" data-transform="Keywords">as</span> <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span>;
                <span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">excludeTag</span> = <span class="pl-v" data-transform="Variables">Tags</span>.<span class="pl-e" data-transform="Member Entities">Story</span>.<span class="pl-e" data-transform="Member Entities">ToString</span>().<span class="pl-e" data-transform="Member Entities">ToLower</span>();

                <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">Json</span>(
                    <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">GetArticles</span>(<span class="pl-v" data-transform="Variables">Tags</span>.<span class="pl-e" data-transform="Member Entities">Story</span>).<span class="pl-e" data-transform="Member Entities">Select</span>(<span class="pl-v" data-transform="Variables">story</span> => <span class="pl-k" data-transform="Keywords">new</span> 
                    {
                        <span class="pl-v" data-transform="Variables">id</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Id</span>,
                        <span class="pl-v" data-transform="Variables">title</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Title</span>,
                        <span class="pl-v" data-transform="Variables">date</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Date</span>,
                        <span class="pl-v" data-transform="Variables">author</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Author</span>.<span class="pl-e" data-transform="Member Entities">Name</span>,
                        <span class="pl-v" data-transform="Variables">tags</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Metadata</span>.<span class="pl-e" data-transform="Member Entities">Where</span>(<span class="pl-v" data-transform="Variables">metadata</span> => <span class="pl-v" data-transform="Variables">metadata</span>.<span class="pl-e" data-transform="Member Entities">Tag</span>.<span class="pl-e" data-transform="Member Entities">Name</span>.<span class="pl-e" data-transform="Member Entities">ToLower</span>() != <span class="pl-v" data-transform="Variables">excludeTag</span>)
                                            .<span class="pl-e" data-transform="Member Entities">Select</span>(<span class="pl-v" data-transform="Variables">metadata</span> => <span class="pl-v" data-transform="Variables">metadata</span>.<span class="pl-e" data-transform="Member Entities">Tag</span>.<span class="pl-e" data-transform="Member Entities">Name</span>),
                        <span class="pl-v" data-transform="Variables">content</span> = <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Content</span>
                    }).<span class="pl-e" data-transform="Member Entities">ToArray</span>().<span class="pl-e" data-transform="Member Entities">Select</span>(<span class="pl-v" data-transform="Variables">result</span> => <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">id</span>,
                        <span class="pl-v" data-transform="Variables">title</span> = <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">title</span>,
                        <span class="pl-v" data-transform="Variables">date</span> = <span class="pl-v" data-transform="Variables">Shared</span>.<span class="pl-e" data-transform="Member Entities">FormatDate</span>(<span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">date</span>),
                        <span class="pl-v" data-transform="Variables">author</span> = <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">author</span>,
                        <span class="pl-v" data-transform="Variables">tags</span> = <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">tags</span>.<span class="pl-e" data-transform="Member Entities">Select</span>(<span class="pl-v" data-transform="Variables">tagName</span> => <span class="pl-v" data-transform="Variables">Shared</span>.<span class="pl-e" data-transform="Member Entities">FormatTag</span>(<span class="pl-v" data-transform="Variables">tagName</span>)),
                        <span class="pl-v" data-transform="Variables">content</span> = <span class="pl-v" data-transform="Variables">result</span>.<span class="pl-e" data-transform="Member Entities">content</span>
                    }));
            }
            <span class="pl-k" data-transform="Keywords">catch</span>
            {
                <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">StatusCode</span>(<span class="pl-c1" data-transform="Numbers">500</span>);
            }
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Gets the news story markdown content.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"id"</span>&gt;The story id&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        [<span class="pl-e" data-transform="Call Entities">Route</span>(<span class="pl-s" data-transform="Strings">"{id}"</span>)]
        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-en" data-transform="Exclusive Entity Names">IActionResult</span> <span class="pl-e" data-transform="Call Entities">GetStory</span>(<span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">id</span>)
        {
            <span class="pl-k" data-transform="Keywords">try</span>
            {
                <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span> <span class="pl-v" data-transform="Variables">store</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">GetService</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">IDataStore</span>)) <span class="pl-k" data-transform="Keywords">as</span> <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span>;
                <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">story</span> = <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">GetArticle</span>(<span class="pl-v" data-transform="Variables">id</span>);

                <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">story</span> == <span class="pl-c1" data-transform="Constant Literals">null</span>)
                {
                    <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-e" data-transform="Call Entities">NotFound</span>();

                    <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">x</span> = <span class="pl-c1" data-transform="Numbers">+3.003</span>;
                    <span class="pl-k" data-transform="Keywords">float</span> <span class="pl-v" data-transform="Variables">f</span> = <span class="pl-c1" data-transform="Numbers">.302</span>;
                    <span class="pl-k" data-transform="Keywords">float</span> <span class="pl-v" data-transform="Variables">g</span> = <span class="pl-c1" data-transform="Numbers">1.02f</span>;
                    <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">k</span> = <span class="pl-c1" data-transform="Numbers">-3</span>;
                    <span class="pl-k" data-transform="Keywords">uint</span> <span class="pl-v" data-transform="Variables">hex</span> = <span class="pl-c1" data-transform="Numbers">0x40001</span>;

                    <span class="pl-k" data-transform="Keywords">switch</span>(<span class="pl-v" data-transform="Variables">hello</span>)
                    {
                        <span class="pl-k" data-transform="Keywords">case</span> <span class="pl-c1" data-transform="Constant Identifiers">ONE</span>:
                            <span class="pl-e" data-transform="Call Entities">helloWorld</span>();
                            <span class="pl-k" data-transform="Keywords">break</span>;
                        <span class="pl-k" data-transform="Keywords">case</span> <span class="pl-c1" data-transform="Constant Identifiers">TWO</span>:
                            {
                                <span class="pl-e" data-transform="Call Entities">helloWorld</span>();
                            }
                            <span class="pl-k" data-transform="Keywords">break</span>;
                        <span class="pl-k" data-transform="Keywords">case</span> <span class="pl-c1" data-transform="Constant Identifiers">THREE</span>:
                            {
                                <span class="pl-e" data-transform="Call Entities">helloWorld</span>();
                            }
                            <span class="pl-k" data-transform="Keywords">break</span>;
                    }
                }

                <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-e" data-transform="Call Entities">Ok</span>(<span class="pl-k" data-transform="Keywords">new</span> { <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Content</span> });
            }
            <span class="pl-k" data-transform="Keywords">catch</span>
            {
                <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">StatusCode</span>(<span class="pl-c1" data-transform="Numbers">500L</span>);
            }
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Star a news story.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"id"</span>&gt;The story id&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        [<span class="pl-e" data-transform="Call Entities">HttpPost</span>(<span class="pl-s" data-transform="Strings">"star/{id}"</span>)]
        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-en" data-transform="Exclusive Entity Names">IActionResult</span> <span class="pl-e" data-transform="Call Entities">StarStory</span>(<span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">id</span>)
        {
            <span class="pl-k" data-transform="Keywords">try</span>
            {
                <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span> <span class="pl-v" data-transform="Variables">store</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">GetService</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">IDataStore</span>)) <span class="pl-k" data-transform="Keywords">as</span> <span class="pl-en" data-transform="Exclusive Entity Names">IDataStore</span>;
                <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">story</span> = <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">GetArticle</span>(<span class="pl-v" data-transform="Variables">id</span>);

                <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">story</span> == <span class="pl-c1" data-transform="Constant Literals">null</span>)
                {
                    <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">NotFound</span>();
                }
                
                <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">storyStars</span> = <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">GetArticleStars</span>(<span class="pl-v" data-transform="Variables">id</span>);
                <span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">excludeIpAddress</span> = <span class="pl-v" data-transform="Variables">Shared</span>.<span class="pl-e" data-transform="Member Entities">GetRequestIpAddress</span>(<span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Request</span>);
                
                <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">storyStars</span>.<span class="pl-e" data-transform="Member Entities">Any</span>(<span class="pl-v" data-transform="Variables">star</span> => <span class="pl-v" data-transform="Variables">star</span>.<span class="pl-e" data-transform="Member Entities">IpAddress</span> == <span class="pl-v" data-transform="Variables">excludeIpAddress</span>))
                {
                    <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">BadRequest</span>();
                }
                
                <span class="pl-v" data-transform="Variables">story</span>.<span class="pl-e" data-transform="Member Entities">Stars</span>.<span class="pl-e" data-transform="Member Entities">Add</span>(<span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">Star</span>(<span class="pl-v" data-transform="Variables">story</span>, <span class="pl-v" data-transform="Variables">excludeIpAddress</span>));
                <span class="pl-v" data-transform="Variables">store</span>.<span class="pl-e" data-transform="Member Entities">Save</span>();
                
                <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">Ok</span>(<span class="pl-k" data-transform="Keywords">new</span> { <span class="pl-v" data-transform="Variables">stars</span> = <span class="pl-v" data-transform="Variables">storyStars</span>.<span class="pl-e" data-transform="Member Entities">Count</span>() });
            }
            <span class="pl-k" data-transform="Keywords">catch</span>
            {
                <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">StatusCode</span>(<span class="pl-c1" data-transform="Numbers">500</span>);
            }
        }
    }
}

<span class="pl-c" data-transform="Comments">/*--------------------------------------------------------*\
|   ______    __   |
|  |  __  |  |  |  |
|  | |  | |  |  |  |
|  | !__! |  |  |  |
|  !______!  !__!  |  binary : tech art
|
|  Application startup.
|----------------------------------------------------------
|  Copyright(C) 2016 Valeriy Novytskyy
\*---------------------------------------------------------*/</span>

<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">System</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">System</span>.<span class="pl-e" data-transform="Member Entities">IO</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">AspNet</span>.<span class="pl-e" data-transform="Member Entities">Security</span>.<span class="pl-e" data-transform="Member Entities">OAuth</span>.<span class="pl-e" data-transform="Member Entities">GitHub</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">AspNet</span>.<span class="pl-e" data-transform="Member Entities">Security</span>.<span class="pl-e" data-transform="Member Entities">OAuth</span>.<span class="pl-e" data-transform="Member Entities">LinkedIn</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">AspNet</span>.<span class="pl-e" data-transform="Member Entities">Security</span>.<span class="pl-e" data-transform="Member Entities">OAuth</span>.<span class="pl-e" data-transform="Member Entities">Reddit</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">AspNet</span>.<span class="pl-e" data-transform="Member Entities">Security</span>.<span class="pl-e" data-transform="Member Entities">OAuth</span>.<span class="pl-e" data-transform="Member Entities">Yahoo</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">AspNetCore</span>.<span class="pl-e" data-transform="Member Entities">Authentication</span>.<span class="pl-e" data-transform="Member Entities">OAuth</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">AspNetCore</span>.<span class="pl-e" data-transform="Member Entities">Builder</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">AspNetCore</span>.<span class="pl-e" data-transform="Member Entities">Hosting</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">AspNetCore</span>.<span class="pl-e" data-transform="Member Entities">Identity</span>.<span class="pl-e" data-transform="Member Entities">EntityFrameworkCore</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">Extensions</span>.<span class="pl-e" data-transform="Member Entities">Configuration</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">Extensions</span>.<span class="pl-e" data-transform="Member Entities">DependencyInjection</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">Extensions</span>.<span class="pl-e" data-transform="Member Entities">FileProviders</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">Microsoft</span>.<span class="pl-e" data-transform="Member Entities">Extensions</span>.<span class="pl-e" data-transform="Member Entities">Logging</span>;
<span class="pl-k" data-transform="Keywords">using</span> <span class="pl-e" data-transform="Namespace Entities">ZeroWeb</span>.<span class="pl-e" data-transform="Member Entities">Models</span>;

<span class="pl-k" data-transform="Keywords">namespace</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">ZeroWeb</span>
{
    <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
    <span class="pl-c" data-transform="Comments">/// Application startup.</span>
    <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
    <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">class</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">Startup</span>
    {
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Initialize configuration.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"env"</span>&gt;The hosting environment.</span>
        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">Startup</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IHostingEnvironment</span> <span class="pl-v" data-transform="Variables">env</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">builder</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">ConfigurationBuilder</span>()
                .<span class="pl-e" data-transform="Member Entities">SetBasePath</span>(<span class="pl-v" data-transform="Variables">env</span>.<span class="pl-e" data-transform="Member Entities">ContentRootPath</span>)
                .<span class="pl-e" data-transform="Member Entities">AddJsonFile</span>(<span class="pl-v" data-transform="Variables">Program</span>.<span class="pl-e" data-transform="Member Entities">Settings</span>, <span class="pl-v" data-transform="Variables">optional</span>: <span class="pl-c1" data-transform="Constant Literals">false</span>)
                .<span class="pl-e" data-transform="Member Entities">AddEnvironmentVariables</span>();

            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">env</span>.<span class="pl-e" data-transform="Member Entities">IsDevelopment</span>())
            {
                <span class="pl-v" data-transform="Variables">builder</span>.<span class="pl-e" data-transform="Member Entities">AddUserSecrets</span>();
            }

            <span class="pl-v" data-transform="Variables">Configuration</span> = <span class="pl-v" data-transform="Variables">builder</span>.<span class="pl-e" data-transform="Member Entities">Build</span>();
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Gets the application configuration.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-en" data-transform="Exclusive Entity Names">IConfigurationRoot</span> <span class="pl-v" data-transform="Variables">Configuration</span> { <span class="pl-k" data-transform="Keywords">get</span>; }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the injection container.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"services"</span>&gt;The IoC container interface.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureServices</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IServiceCollection</span> <span class="pl-v" data-transform="Variables">services</span>)
        {
            <span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">AddMvc</span>();
            <span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">AddSession</span>();

            <span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">AddOptions</span>();
            <span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">AddSingleton</span><<span class="pl-en" data-transform="Templated Entity Names">IConfiguration</span>>(<span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>);

            <span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">AddEntityFrameworkSqlite</span>()
                    .<span class="pl-e" data-transform="Member Entities">AddDbContext</span><<span class="pl-en" data-transform="Templated Entity Names">Context</span>>();
            
            <span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">AddIdentity</span><<span class="pl-en" data-transform="Entity Names">User</span>, <span class="pl-en" data-transform="Templated Entity Names">IdentityRole</span>>(<span class="pl-v" data-transform="Variables">options</span> =>
                    {
                        <span class="pl-v" data-transform="Variables">options</span>.<span class="pl-e" data-transform="Member Entities">User</span>.<span class="pl-e" data-transform="Member Entities">AllowedUserNameCharacters</span> += <span class="pl-s" data-transform="Strings">"="</span>;
                    })
                    .<span class="pl-e" data-transform="Member Entities">AddEntityFrameworkStores</span><<span class="pl-en" data-transform="Templated Entity Names">Context</span>>()
                    .<span class="pl-e" data-transform="Member Entities">AddDefaultTokenProviders</span>();

            <span class="pl-v" data-transform="Variables">services</span>.<span class="pl-e" data-transform="Member Entities">AddScoped</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">IDataStore</span>), <span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">SiteDataStore</span>));
        }
        
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the injected dependencies.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"env"</span>&gt;The hosting environment.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"loggerFactory"</span>&gt;The logger factory.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">public</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">Configure</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>, <span class="pl-en" data-transform="Exclusive Entity Names">IHostingEnvironment</span> <span class="pl-v" data-transform="Variables">env</span>, <span class="pl-en" data-transform="Exclusive Entity Names">ILoggerFactory</span> <span class="pl-v" data-transform="Variables">loggerFactory</span>)
        {
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">env</span>.<span class="pl-e" data-transform="Member Entities">IsDevelopment</span>())
            {
                <span class="pl-c" data-transform="Comments">// Enable logging.</span>
                <span class="pl-v" data-transform="Variables">loggerFactory</span>.<span class="pl-e" data-transform="Member Entities">AddConsole</span>(<span class="pl-v" data-transform="Variables">Configuration</span>.<span class="pl-e" data-transform="Member Entities">GetSection</span>(<span class="pl-s" data-transform="Strings">"Logging"</span>));
                <span class="pl-v" data-transform="Variables">loggerFactory</span>.<span class="pl-e" data-transform="Member Entities">AddDebug</span>();

                <span class="pl-c" data-transform="Comments">// Redirect routes that throw exceptions to developer error page.</span>
                <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseDeveloperExceptionPage</span>();

                <span class="pl-c" data-transform="Comments">// Enable browser debugging connection.</span>
                <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseBrowserLink</span>();
            }
            <span class="pl-k" data-transform="Keywords">else</span>
            {
                <span class="pl-c" data-transform="Comments">// Redirect routes that throws exceptions to production error page.</span>
                <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseExceptionHandler</span>(<span class="pl-s" data-transform="Strings">"/Shared/Error"</span>);
            }
            
            <span class="pl-c" data-transform="Comments">// Setup static resource routes.</span>
            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseStaticFiles</span>();

            <span class="pl-c" data-transform="Comments">// Setup identity.</span>
            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseIdentity</span>();

            <span class="pl-c" data-transform="Comments">// Setup sessions.</span>
            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseSession</span>();

            <span class="pl-c" data-transform="Comments">// Setup Yahoo authentication.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureYahooAuthentication</span>(<span class="pl-v" data-transform="Variables">app</span>);

            <span class="pl-c" data-transform="Comments">// Setup LinkedIn authentication.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureLinkedInAuthentication</span>(<span class="pl-v" data-transform="Variables">app</span>);

            <span class="pl-c" data-transform="Comments">// Setup Reddit authentication.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureRedditAuthentication</span>(<span class="pl-v" data-transform="Variables">app</span>);

            <span class="pl-c" data-transform="Comments">// Setup Microsoft authentication.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureMicrosoftAuthentication</span>(<span class="pl-v" data-transform="Variables">app</span>);

            <span class="pl-c" data-transform="Comments">// Setup Github authentication.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureGithubAuthentication</span>(<span class="pl-v" data-transform="Variables">app</span>);

            <span class="pl-c" data-transform="Comments">// Setup Google authentication.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureGoogleAuthentication</span>(<span class="pl-v" data-transform="Variables">app</span>);

            <span class="pl-c" data-transform="Comments">// Setup Twitter authentication.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureTwitterAuthentication</span>(<span class="pl-v" data-transform="Variables">app</span>);

            <span class="pl-c" data-transform="Comments">// Setup Facebook authentication.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureFacebookAuthentication</span>(<span class="pl-v" data-transform="Variables">app</span>);

            <span class="pl-c" data-transform="Comments">// Setup layout and partial routes.</span>
            <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-e" data-transform="Call Entities">ConfigureRoutes</span>(<span class="pl-v" data-transform="Variables">app</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the application routing.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureRoutes</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseMvc</span>(<span class="pl-v" data-transform="Variables">routes</span> =>
            {
                <span class="pl-c" data-transform="Comments">// Default route redirects to Startup controller.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"default"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">Empty</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"Startup"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>
                    }
                );

                <span class="pl-c" data-transform="Comments">// News Partial called by Angular template.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"news-view"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-s" data-transform="Strings">"views/news/{id:int?}"</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"News"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>,
                        <span class="pl-v" data-transform="Variables">id</span> = <span class="pl-c1" data-transform="Numbers">0</span>
                    }
                );

                <span class="pl-c" data-transform="Comments">// News.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"news"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-s" data-transform="Strings">"news"</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"Startup"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>
                    }
                );

                <span class="pl-c" data-transform="Comments">// Articles Partial called by Angular template.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"articles-view"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-s" data-transform="Strings">"views/articles"</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"Articles"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>
                    }
                );

                <span class="pl-c" data-transform="Comments">// Articles.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"articles"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-s" data-transform="Strings">"articles"</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"Startup"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>
                    }
                );

                <span class="pl-c" data-transform="Comments">// Projects Partial called by Angular template.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"projects-view"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-s" data-transform="Strings">"views/projects"</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"Projects"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>
                    }
                );

                <span class="pl-c" data-transform="Comments">// Projects.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"projects"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-s" data-transform="Strings">"projects"</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"Startup"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>
                    }
                );

                <span class="pl-c" data-transform="Comments">// About Partial called by Angular template.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"about-view"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-s" data-transform="Strings">"views/about"</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"About"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>
                    }
                );

                <span class="pl-c" data-transform="Comments">// About.</span>
                <span class="pl-v" data-transform="Variables">routes</span>.<span class="pl-e" data-transform="Member Entities">MapRoute</span>(
                    <span class="pl-v" data-transform="Variables">name</span>: <span class="pl-s" data-transform="Strings">"about"</span>,
                    <span class="pl-v" data-transform="Variables">template</span>: <span class="pl-s" data-transform="Strings">"about"</span>,
                    <span class="pl-v" data-transform="Variables">defaults</span>: <span class="pl-k" data-transform="Keywords">new</span>
                    {
                        <span class="pl-v" data-transform="Variables">controller</span> = <span class="pl-s" data-transform="Strings">"Startup"</span>,
                        <span class="pl-v" data-transform="Variables">action</span> = <span class="pl-s" data-transform="Strings">"Index"</span>
                    }
                );
            });
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the Yahoo external login provider.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureYahooAuthentication</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">yahooOptions</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">YahooAuthenticationOptions</span>()
            {
                <span class="pl-v" data-transform="Variables">ClientId</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"yahooId"</span>],
                <span class="pl-v" data-transform="Variables">ClientSecret</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"yahooSecret"</span>]
            };

            <span class="pl-c" data-transform="Comments">// Ensure secrets have been loaded.</span>
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">yahooOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientId</span>) ||
                <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">yahooOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientSecret</span>))
            {
                <span class="pl-k" data-transform="Keywords">return</span>;
            }

            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseYahooAuthentication</span>(<span class="pl-v" data-transform="Variables">yahooOptions</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the Reddit external login provider.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureRedditAuthentication</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">redditOptions</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">RedditAuthenticationOptions</span>()
            {
                <span class="pl-v" data-transform="Variables">ClientId</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"redditId"</span>],
                <span class="pl-v" data-transform="Variables">ClientSecret</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"redditSecret"</span>]
            };

            <span class="pl-c" data-transform="Comments">// Ensure secrets have been loaded.</span>
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">redditOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientId</span>) ||
                <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">redditOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientSecret</span>))
            {
                <span class="pl-k" data-transform="Keywords">return</span>;
            }

            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseRedditAuthentication</span>(<span class="pl-v" data-transform="Variables">redditOptions</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the LinkedIn external login provider.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureLinkedInAuthentication</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">linkedInOptions</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">LinkedInAuthenticationOptions</span>()
            {
                <span class="pl-v" data-transform="Variables">ClientId</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"linkedInId"</span>],
                <span class="pl-v" data-transform="Variables">ClientSecret</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"linkedInSecret"</span>]
            };

            <span class="pl-c" data-transform="Comments">// Ensure secrets have been loaded.</span>
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">linkedInOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientId</span>) ||
                <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">linkedInOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientSecret</span>))
            {
                <span class="pl-k" data-transform="Keywords">return</span>;
            }

            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseLinkedInAuthentication</span>(<span class="pl-v" data-transform="Variables">linkedInOptions</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the Google external login provider.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureGoogleAuthentication</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">googleOptions</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">GoogleOptions</span>()
            {
                <span class="pl-v" data-transform="Variables">ClientId</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"googleId"</span>],
                <span class="pl-v" data-transform="Variables">ClientSecret</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"googleSecret"</span>]
            };

            <span class="pl-c" data-transform="Comments">// Ensure secrets have been loaded.</span>
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">googleOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientId</span>) ||
                <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">googleOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientSecret</span>))
            {
                <span class="pl-k" data-transform="Keywords">return</span>;
            }

            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseGoogleAuthentication</span>(<span class="pl-v" data-transform="Variables">googleOptions</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the Github external login provider.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureGithubAuthentication</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">githubOptions</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-en" data-transform="Entity Names">GitHubAuthenticationOptions</span>
            {
                <span class="pl-v" data-transform="Variables">ClientId</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"githubId"</span>],
                <span class="pl-v" data-transform="Variables">ClientSecret</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"githubSecret"</span>],
                <span class="pl-v" data-transform="Variables">Scope</span> = { <span class="pl-s" data-transform="Strings">"user:login"</span> }
            };

            <span class="pl-c" data-transform="Comments">// Ensure secrets have been loaded.</span>
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">githubOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientId</span>) ||
                <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">githubOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientSecret</span>))
            {
                <span class="pl-k" data-transform="Keywords">return</span>;
            }

            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseGitHubAuthentication</span>(<span class="pl-v" data-transform="Variables">githubOptions</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the Microsoft external login provider.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureMicrosoftAuthentication</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">microsoftOptions</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">MicrosoftAccountOptions</span>()
            {
                <span class="pl-v" data-transform="Variables">ClientId</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"microsoftId"</span>],
                <span class="pl-v" data-transform="Variables">ClientSecret</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"microsoftSecret"</span>]
            };

            <span class="pl-c" data-transform="Comments">// Ensure secrets have been loaded.</span>
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">microsoftOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientId</span>) ||
                <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">microsoftOptions</span>.<span class="pl-e" data-transform="Member Entities">ClientSecret</span>))
            {
                <span class="pl-k" data-transform="Keywords">return</span>;
            }

            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseMicrosoftAccountAuthentication</span>(<span class="pl-v" data-transform="Variables">microsoftOptions</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the Twitter external login provider.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureTwitterAuthentication</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">twitterOptions</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">TwitterOptions</span>()
            {
                <span class="pl-v" data-transform="Variables">ConsumerKey</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"twitterId"</span>],
                <span class="pl-v" data-transform="Variables">ConsumerSecret</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"twitterSecret"</span>]
            };

            <span class="pl-c" data-transform="Comments">// Ensure secrets have been loaded.</span>
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">twitterOptions</span>.<span class="pl-e" data-transform="Member Entities">ConsumerKey</span>) ||
                <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">twitterOptions</span>.<span class="pl-e" data-transform="Member Entities">ConsumerSecret</span>))
            {
                <span class="pl-k" data-transform="Keywords">return</span>;
            }

            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseTwitterAuthentication</span>(<span class="pl-v" data-transform="Variables">twitterOptions</span>);
        }

        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// Configures the Faceboook external login provider.</span>
        <span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
        <span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">param</span> <span class="pl-e" data-transform="Comment Attributes">name</span>=<span class="pl-s" data-transform="Comment Attribute Values">"app"</span>&gt;The application configuration.&lt;/<span class="pl-ent" data-transform="Comment Entities">param</span>&gt;</span>
        <span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">ConfigureFacebookAuthentication</span>(<span class="pl-en" data-transform="Exclusive Entity Names">IApplicationBuilder</span> <span class="pl-v" data-transform="Variables">app</span>)
        {
            <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">facebookOptions</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">FacebookOptions</span>()
            {
                <span class="pl-v" data-transform="Variables">AppId</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"facebookId"</span>],
                <span class="pl-v" data-transform="Variables">AppSecret</span> = <span class="pl-c1" data-transform="Constant Literals">this</span>.<span class="pl-v" data-transform="Variables">Configuration</span>[<span class="pl-s" data-transform="Strings">"facebookSecret"</span>],

                <span class="pl-c" data-transform="Comments">// Use popup style for the challenge page.</span>
                <span class="pl-v" data-transform="Variables">Events</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">OAuthEvents</span>()
                {
                    <span class="pl-v" data-transform="Variables">OnRedirectToAuthorizationEndpoint</span> = (<span class="pl-v" data-transform="Variables">originalContext</span>) =>
                    {
                        <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">context</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">OAuthRedirectToAuthorizationContext</span>(
                            <span class="pl-v" data-transform="Variables">originalContext</span>.<span class="pl-e" data-transform="Member Entities">HttpContext</span>,
                            <span class="pl-v" data-transform="Variables">originalContext</span>.<span class="pl-e" data-transform="Member Entities">Options</span>,
                            <span class="pl-v" data-transform="Variables">originalContext</span>.<span class="pl-e" data-transform="Member Entities">Properties</span>,
                            <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">Format</span>(<span class="pl-s" data-transform="Strings">"{0}&amp;display=popup"</span>, <span class="pl-v" data-transform="Variables">originalContext</span>.<span class="pl-e" data-transform="Member Entities">RedirectUri</span>));
                        
                        <span class="pl-v" data-transform="Variables">context</span>.<span class="pl-e" data-transform="Member Entities">Response</span>.<span class="pl-e" data-transform="Member Entities">Redirect</span>(<span class="pl-v" data-transform="Variables">context</span>.<span class="pl-e" data-transform="Member Entities">RedirectUri</span>);
                        <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-v" data-transform="Variables">System</span>.<span class="pl-e" data-transform="Member Entities">Threading</span>.<span class="pl-e" data-transform="Member Entities">Tasks</span>.<span class="pl-e" data-transform="Member Entities">Task</span>.<span class="pl-e" data-transform="Member Entities">FromResult</span>(<span class="pl-c1" data-transform="Numbers">0</span>);
                    }
                }
            };

            <span class="pl-c" data-transform="Comments">// Ensure secrets have been loaded.</span>
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">facebookOptions</span>.<span class="pl-e" data-transform="Member Entities">AppId</span>) ||
                <span class="pl-k" data-transform="Keywords">string</span>.<span class="pl-e" data-transform="Member Entities">IsNullOrEmpty</span>(<span class="pl-v" data-transform="Variables">facebookOptions</span>.<span class="pl-e" data-transform="Member Entities">AppSecret</span>))
            {
                <span class="pl-k" data-transform="Keywords">return</span>;
            }

            <span class="pl-c" data-transform="Comments">// Request only the public profile.</span>
            <span class="pl-v" data-transform="Variables">facebookOptions</span>.<span class="pl-e" data-transform="Member Entities">Scope</span>.<span class="pl-e" data-transform="Member Entities">Clear</span>();
            <span class="pl-v" data-transform="Variables">facebookOptions</span>.<span class="pl-e" data-transform="Member Entities">Scope</span>.<span class="pl-e" data-transform="Member Entities">Add</span>(<span class="pl-s" data-transform="Strings">"public_profile"</span>);

            <span class="pl-c" data-transform="Comments">// Request only the name claim.</span>
            <span class="pl-v" data-transform="Variables">facebookOptions</span>.<span class="pl-e" data-transform="Member Entities">Fields</span>.<span class="pl-e" data-transform="Member Entities">Clear</span>();
            <span class="pl-v" data-transform="Variables">facebookOptions</span>.<span class="pl-e" data-transform="Member Entities">Fields</span>.<span class="pl-e" data-transform="Member Entities">Add</span>(<span class="pl-s" data-transform="Strings">"name"</span>);

            <span class="pl-v" data-transform="Variables">app</span>.<span class="pl-e" data-transform="Member Entities">UseFacebookAuthentication</span>(<span class="pl-v" data-transform="Variables">facebookOptions</span>);
        }
    }
}

<span class="pl-c" data-transform="Comments">// heres a comment</span>
<span class="pl-k" data-transform="Keywords">bool</span> <span class="pl-v" data-transform="Variables">notInitialized</span>;
<span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">anotherNotInitialized</span>;
<span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">variableInNotBlock</span> = <span class="pl-c1" data-transform="Numbers">3</span>;
<span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">anotherNonBlock</span> = <span class="pl-s" data-transform="Strings">"hello"</span>;

<span class="pl-k" data-transform="Keywords">namespace</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">zeroweb</span>.<span class="pl-e" data-transform="Member Entities">Migrations</span>
{
    [<span class="pl-e" data-transform="Call Entities">DbContext</span>(<span class="pl-k" data-transform="Keywords">typeof</span>(<span class="pl-en" data-transform="Entity Names">Context</span>))]
    <span class="pl-k" data-transform="Keywords">partial</span> <span class="pl-k" data-transform="Keywords">class</span> <span class="pl-e" data-transform="Exclusive Entities (Non-Scoped)">ContextModelSnapshot</span> : <span class="pl-en" data-transform="Entity Names">ModelSnapshot</span>
    {
        <span class="pl-k" data-transform="Keywords">protected</span> <span class="pl-k" data-transform="Keywords">override</span> <span class="pl-k" data-transform="Keywords">void</span> <span class="pl-e" data-transform="Call Entities">BuildModel</span>(<span class="pl-en" data-transform="Exclusive Entity Names">ModelBuilder</span> <span class="pl-v" data-transform="Variables">modelBuilder</span>)
        {
            <span class="pl-v" data-transform="Variables">modelBuilder</span>
                .<span class="pl-e" data-transform="Member Entities">HasAnnotation</span>(<span class="pl-s" data-transform="Strings">"ProductVersion"</span>, <span class="pl-s" data-transform="Strings">"1.0.0-rtm-21431"</span>);

            <span class="pl-v" data-transform="Variables">modelBuilder</span>.<span class="pl-e" data-transform="Member Entities">Entity</span>(<span class="pl-s" data-transform="Strings">"ZeroWeb.Models.Article"</span>, <span class="pl-v" data-transform="Variables">b</span> =>
                {
                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">int</span>>(<span class="pl-s" data-transform="Strings">"Id"</span>)
                        .<span class="pl-e" data-transform="Member Entities">ValueGeneratedOnAdd</span>();

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">int</span>?>(<span class="pl-s" data-transform="Strings">"AuthorId"</span>)
                        .<span class="pl-e" data-transform="Member Entities">IsRequired</span>();

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">string</span>>(<span class="pl-s" data-transform="Strings">"Content"</span>)
                        .<span class="pl-e" data-transform="Member Entities">IsRequired</span>()
                        .<span class="pl-e" data-transform="Member Entities">HasColumnType</span>(<span class="pl-s" data-transform="Strings">"char"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-en" data-transform="Templated Entity Names">DateTime</span>>(<span class="pl-s" data-transform="Strings">"Date"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">string</span>>(<span class="pl-s" data-transform="Strings">"Key"</span>)
                        .<span class="pl-e" data-transform="Member Entities">IsRequired</span>()
                        .<span class="pl-e" data-transform="Member Entities">HasColumnType</span>(<span class="pl-s" data-transform="Strings">"char"</span>)
                        .<span class="pl-e" data-transform="Member Entities">HasAnnotation</span>(<span class="pl-s" data-transform="Strings">"MaxLength"</span>, <span class="pl-c1" data-transform="Numbers">128</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">double</span>?>(<span class="pl-s" data-transform="Strings">"LocationLatitude"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">double</span>?>(<span class="pl-s" data-transform="Strings">"LocationLongitude"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">string</span>>(<span class="pl-s" data-transform="Strings">"LocationName"</span>)
                        .<span class="pl-e" data-transform="Member Entities">HasAnnotation</span>(<span class="pl-s" data-transform="Strings">"MaxLength"</span>, <span class="pl-c1" data-transform="Numbers">32</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">double</span>?>(<span class="pl-s" data-transform="Strings">"LocationZoom"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">bool</span>>(<span class="pl-s" data-transform="Strings">"Published"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">string</span>>(<span class="pl-s" data-transform="Strings">"Thumbnail"</span>)
                        .<span class="pl-e" data-transform="Member Entities">IsRequired</span>()
                        .<span class="pl-e" data-transform="Member Entities">HasColumnType</span>(<span class="pl-s" data-transform="Strings">"char"</span>)
                        .<span class="pl-e" data-transform="Member Entities">HasAnnotation</span>(<span class="pl-s" data-transform="Strings">"MaxLength"</span>, <span class="pl-c1" data-transform="Numbers">256</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">string</span>>(<span class="pl-s" data-transform="Strings">"Title"</span>)
                        .<span class="pl-e" data-transform="Member Entities">IsRequired</span>()
                        .<span class="pl-e" data-transform="Member Entities">HasColumnType</span>(<span class="pl-s" data-transform="Strings">"char"</span>)
                        .<span class="pl-e" data-transform="Member Entities">HasAnnotation</span>(<span class="pl-s" data-transform="Strings">"MaxLength"</span>, <span class="pl-c1" data-transform="Numbers">64</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">Property</span><<span class="pl-k" data-transform="Keywords">int</span>>(<span class="pl-s" data-transform="Strings">"Views"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">HasKey</span>(<span class="pl-s" data-transform="Strings">"Id"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">HasIndex</span>(<span class="pl-s" data-transform="Strings">"AuthorId"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">HasIndex</span>(<span class="pl-s" data-transform="Strings">"Key"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">HasIndex</span>(<span class="pl-s" data-transform="Strings">"Date"</span>, <span class="pl-s" data-transform="Strings">"Published"</span>);

                    <span class="pl-v" data-transform="Variables">b</span>.<span class="pl-e" data-transform="Member Entities">ToTable</span>(<span class="pl-s" data-transform="Strings">"Articles"</span>);
                });
        }
    }
}

<span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
<span class="pl-c" data-transform="Comments">/// Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they </span>
<span class="pl-c" data-transform="Comments">/// don't conflict with their use in Markdown for code, italics and strong. </span>
<span class="pl-c" data-transform="Comments">/// We're replacing each such character with its corresponding hash </span>
<span class="pl-c" data-transform="Comments">/// value; this is likely overkill, but it should prevent us from colliding </span>
<span class="pl-c" data-transform="Comments">/// with the escape values by accident.</span>
<span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
<span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">string</span> <span class="pl-e" data-transform="Call Entities">EscapeSpecialCharsWithinTagAttributes</span>(<span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">text</span>)
{
    <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">tokens</span> = <span class="pl-e" data-transform="Call Entities">TokenizeHTML</span>(<span class="pl-v" data-transform="Variables">text</span>);

    <span class="pl-c" data-transform="Comments">// now, rebuild text from the tokens</span>
    <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">sb</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">StringBuilder</span>(<span class="pl-v" data-transform="Variables">text</span>.<span class="pl-e" data-transform="Member Entities">Length</span>);

    <span class="pl-k" data-transform="Keywords">foreach</span> (<span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">token</span> <span class="pl-k" data-transform="Keywords">in</span> <span class="pl-v" data-transform="Variables">tokens</span>)
    {
        <span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">value</span> = <span class="pl-v" data-transform="Variables">token</span>.<span class="pl-e" data-transform="Member Entities">Value</span>;

        <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">token</span>.<span class="pl-e" data-transform="Member Entities">Type</span> == <span class="pl-v" data-transform="Variables">TokenType</span>.<span class="pl-e" data-transform="Member Entities">Tag</span>)
        {
            <span class="pl-v" data-transform="Variables">value</span> = <span class="pl-v" data-transform="Variables">value</span>.<span class="pl-e" data-transform="Member Entities">Replace</span>(<span class="pl-s" data-transform="Strings">@"\"</span>, <span class="pl-v" data-transform="Variables">_escapeTable</span>[<span class="pl-s" data-transform="Strings">@"\"</span>]);
                    
            <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">_autoHyperlink</span> && <span class="pl-v" data-transform="Variables">value</span>.<span class="pl-e" data-transform="Member Entities">StartsWith</span>(<span class="pl-s" data-transform="Strings">"&lt;!"</span>)) <span class="pl-c" data-transform="Comments">// escape slashes in comments to prevent autolinking there -- http://meta.stackexchange.com/questions/95987/html-comment-containing-url-breaks-if-followed-by-another-html-comment</span>
                <span class="pl-v" data-transform="Variables">value</span> = <span class="pl-v" data-transform="Variables">value</span>.<span class="pl-e" data-transform="Member Entities">Replace</span>(<span class="pl-s" data-transform="Strings">"/"</span>, <span class="pl-v" data-transform="Variables">_escapeTable</span>[<span class="pl-s" data-transform="Strings">"/"</span>]);
                    
            <span class="pl-v" data-transform="Variables">value</span> = <span class="pl-v" data-transform="Variables">Regex</span>.<span class="pl-e" data-transform="Member Entities">Replace</span>(<span class="pl-v" data-transform="Variables">value</span>, <span class="pl-s" data-transform="Strings">"(?&lt;=.)&lt;/?code&gt;(?=.)"</span>, <span class="pl-v" data-transform="Variables">_escapeTable</span>[<span class="pl-s" data-transform="Strings">@"`"</span>]);
            <span class="pl-v" data-transform="Variables">value</span> = <span class="pl-e" data-transform="Call Entities">EscapeBoldItalic</span>(<span class="pl-v" data-transform="Variables">value</span>);
        }

        <span class="pl-v" data-transform="Variables">sb</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-v" data-transform="Variables">value</span>);
    }

    <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-v" data-transform="Variables">sb</span>.<span class="pl-e" data-transform="Member Entities">ToString</span>();
}

<span class="pl-c" data-transform="Comments">/// &lt;<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
<span class="pl-c" data-transform="Comments">/// convert all tabs to _tabWidth spaces; </span>
<span class="pl-c" data-transform="Comments">/// standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); </span>
<span class="pl-c" data-transform="Comments">/// makes sure text ends with a couple of newlines; </span>
<span class="pl-c" data-transform="Comments">/// removes any blank lines (only spaces) in the text</span>
<span class="pl-c" data-transform="Comments">/// &lt;/<span class="pl-ent" data-transform="Comment Entities">summary</span>&gt;</span>
<span class="pl-k" data-transform="Keywords">private</span> <span class="pl-k" data-transform="Keywords">string</span> <span class="pl-e" data-transform="Call Entities">Normalize</span>(<span class="pl-k" data-transform="Keywords">string</span> <span class="pl-v" data-transform="Variables">text</span>)
{
    <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">output</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">StringBuilder</span>(<span class="pl-v" data-transform="Variables">text</span>.<span class="pl-e" data-transform="Member Entities">Length</span>);
    <span class="pl-k" data-transform="Keywords">var</span> <span class="pl-v" data-transform="Variables">line</span> = <span class="pl-k" data-transform="Keywords">new</span> <span class="pl-e" data-transform="Call Entities">StringBuilder</span>();
    <span class="pl-k" data-transform="Keywords">bool</span> <span class="pl-v" data-transform="Variables">valid</span> = <span class="pl-c1" data-transform="Constant Literals">false</span>;

    <span class="pl-k" data-transform="Keywords">for</span> (<span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">i</span> = <span class="pl-c1" data-transform="Numbers">0</span>; <span class="pl-v" data-transform="Variables">i</span> < <span class="pl-v" data-transform="Variables">text</span>.<span class="pl-e" data-transform="Member Entities">Length</span>; <span class="pl-v" data-transform="Variables">i</span>++)
    {
        <span class="pl-k" data-transform="Keywords">switch</span> (<span class="pl-v" data-transform="Variables">text</span>[<span class="pl-v" data-transform="Variables">i</span>])
        {
            <span class="pl-k" data-transform="Keywords">case</span> '\<span class="pl-c1" data-transform="Constant Identifiers">n</span>':
                <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">valid</span>) <span class="pl-v" data-transform="Variables">output</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-v" data-transform="Variables">line</span>);
                <span class="pl-v" data-transform="Variables">output</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-s" data-transform="Strings">'\n'</span>);
                <span class="pl-v" data-transform="Variables">line</span>.<span class="pl-e" data-transform="Member Entities">Length</span> = <span class="pl-c1" data-transform="Numbers">0</span>; <span class="pl-v" data-transform="Variables">valid</span> = <span class="pl-c1" data-transform="Constant Literals">false</span>;
                <span class="pl-k" data-transform="Keywords">break</span>;
            <span class="pl-k" data-transform="Keywords">case</span> '\<span class="pl-c1" data-transform="Constant Identifiers">r</span>':
                <span class="pl-k" data-transform="Keywords">if</span> ((<span class="pl-v" data-transform="Variables">i</span> < <span class="pl-v" data-transform="Variables">text</span>.<span class="pl-e" data-transform="Member Entities">Length</span> - <span class="pl-c1" data-transform="Numbers">1</span>) && (<span class="pl-v" data-transform="Variables">text</span>[<span class="pl-v" data-transform="Variables">i</span> + <span class="pl-c1" data-transform="Numbers">1</span>] != <span class="pl-s" data-transform="Strings">'\n'</span>))
                {
                    <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">valid</span>) <span class="pl-v" data-transform="Variables">output</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-v" data-transform="Variables">line</span>);
                    <span class="pl-v" data-transform="Variables">output</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-s" data-transform="Strings">'\n'</span>);
                    <span class="pl-v" data-transform="Variables">line</span>.<span class="pl-e" data-transform="Member Entities">Length</span> = <span class="pl-c1" data-transform="Numbers">0</span>; <span class="pl-v" data-transform="Variables">valid</span> = <span class="pl-c1" data-transform="Constant Literals">false</span>;
                }
                <span class="pl-k" data-transform="Keywords">break</span>;
            <span class="pl-k" data-transform="Keywords">case</span> '\<span class="pl-c1" data-transform="Constant Identifiers">t</span>':
                <span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">width</span> = (<span class="pl-v" data-transform="Variables">_tabWidth</span> - <span class="pl-v" data-transform="Variables">line</span>.<span class="pl-e" data-transform="Member Entities">Length</span> % <span class="pl-v" data-transform="Variables">_tabWidth</span>);
                <span class="pl-k" data-transform="Keywords">for</span> (<span class="pl-k" data-transform="Keywords">int</span> <span class="pl-v" data-transform="Variables">k</span> = <span class="pl-c1" data-transform="Numbers">0</span>; <span class="pl-v" data-transform="Variables">k</span> < <span class="pl-v" data-transform="Variables">width</span>; <span class="pl-v" data-transform="Variables">k</span>++)
                    <span class="pl-v" data-transform="Variables">line</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-s" data-transform="Strings">' '</span>);
                <span class="pl-k" data-transform="Keywords">break</span>;
            <span class="pl-k" data-transform="Keywords">case</span> '\<span class="pl-c1" data-transform="Constant Identifiers">x1A</span>':
                <span class="pl-k" data-transform="Keywords">break</span>;
            <span class="pl-k" data-transform="Keywords">default</span>:
                <span class="pl-k" data-transform="Keywords">if</span> (!<span class="pl-v" data-transform="Variables">valid</span> && <span class="pl-v" data-transform="Variables">text</span>[<span class="pl-v" data-transform="Variables">i</span>] != <span class="pl-s" data-transform="Strings">' '</span>) <span class="pl-v" data-transform="Variables">valid</span> = <span class="pl-v" data-transform="Variables">true</span>;
                <span class="pl-v" data-transform="Variables">line</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-v" data-transform="Variables">text</span>[<span class="pl-v" data-transform="Variables">i</span>]);
                <span class="pl-k" data-transform="Keywords">break</span>;
        }
    }

    <span class="pl-k" data-transform="Keywords">if</span> (<span class="pl-v" data-transform="Variables">valid</span>) <span class="pl-v" data-transform="Variables">output</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-v" data-transform="Variables">line</span>);
    <span class="pl-v" data-transform="Variables">output</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-s" data-transform="Strings">'\n'</span>);

    <span class="pl-c" data-transform="Comments">// add two newlines to the end before return</span>
    <span class="pl-k" data-transform="Keywords">return</span> <span class="pl-v" data-transform="Variables">output</span>.<span class="pl-e" data-transform="Member Entities">Append</span>(<span class="pl-s" data-transform="Strings">"\n\n"</span>).<span class="pl-e" data-transform="Member Entities">ToString</span>();
}