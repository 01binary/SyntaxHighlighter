/// <summary>
/// Within tags -- meaning between &lt; and &gt; -- encode [\ ` * _] so they 
/// don't conflict with their use in Markdown for code, italics and strong. 
/// We're replacing each such character with its corresponding hash 
/// value; this is likely overkill, but it should prevent us from colliding 
/// with the escape values by accident.
/// </summary>
private string EscapeSpecialCharsWithinTagAttributes(string text)
{
    var tokens = TokenizeHTML(text);

    // now, rebuild text from the tokens
    var sb = new StringBuilder(text.Length);

    foreach (var token in tokens)
    {
        string value = token.Value;

        if (token.Type == TokenType.Tag)
        {
            value = value.Replace(@"\", _escapeTable[@"\"]);
                    
            if (_autoHyperlink && value.StartsWith("<!")) // escape slashes in comments to prevent autolinking there -- http://meta.stackexchange.com/questions/95987/html-comment-containing-url-breaks-if-followed-by-another-html-comment
                value = value.Replace("/", _escapeTable["/"]);
                    
            value = Regex.Replace(value, "(?<=.)</?code>(?=.)", _escapeTable[@"`"]);
            value = EscapeBoldItalic(value);
        }

        sb.Append(value);
    }

    return sb.ToString();
}

/// <summary>
/// convert all tabs to _tabWidth spaces; 
/// standardizes line endings from DOS (CR LF) or Mac (CR) to UNIX (LF); 
/// makes sure text ends with a couple of newlines; 
/// removes any blank lines (only spaces) in the text
/// </summary>
private string Normalize(string text)
{
    var output = new StringBuilder(text.Length);
    var line = new StringBuilder();
    bool valid = false;

    for (int i = 0; i < text.Length; i++)
    {
        switch (text[i])
        {
            case '\n':
                if (valid) output.Append(line);
                output.Append('\n');
                line.Length = 0; valid = false;
                break;
            case '\r':
                if ((i < text.Length - 1) && (text[i + 1] != '\n'))
                {
                    if (valid) output.Append(line);
                    output.Append('\n');
                    line.Length = 0; valid = false;
                }
                break;
            case '\t':
                int width = (_tabWidth - line.Length % _tabWidth);
                for (int k = 0; k < width; k++)
                    line.Append(' ');
                break;
            case '\x1A':
                break;
            default:
                if (!valid && text[i] != ' ') valid = true;
                line.Append(text[i]);
                break;
        }
    }

    if (valid) output.Append(line);
    output.Append('\n');

    // add two newlines to the end before return
    return output.Append("\n\n").ToString();
}