/*--------------------------------------------------------*\
|   ______    __   |
|  |  __  |  |  |  |
|  | |  | |  |  |  |
|  | !__! |  |  |  |
|  !______!  !__!  |  binary : tech art
|
|  Defines the Users Endpoint.
|----------------------------------------------------------
|  Copyright(C) 2016 Valeriy Novytskyy
\*---------------------------------------------------------*/

using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using ZeroWeb.Models;

namespace ZeroWeb.Api
{
    /// <summary>
    /// The Users Endpoint.
    /// </summary>
    [Route("api/users")]
    public class UsersController: Controller
    {
        /// <summary>
        /// The view to display on successful login.
        /// </summary>
        private static readonly string Failure = "LoginFailure";

        /// <summary>
        /// The view to display on a failed login.
        /// </summary>
        private static readonly string Success = "LoginSuccess";

        /// <summary>
        /// The application user manager.
        /// </summary>
        private readonly UserManager<User> userManager;

        /// <summary>
        /// The application sign-in manager.
        /// </summary>
        private readonly SignInManager<User> signInManager;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersController"/> class.
        /// </summary>
        /// <param name="userManager">The user manager.</param>
        /// <param name="signInManager">The sign-in manager.</param>
        public UsersController(UserManager<User> userManager,
                               SignInManager<User> signInManager)
        {
            this.userManager = userManager;
            this.signInManager = signInManager;
        }

        /// <summary>
        /// Gets the current user name.
        /// </summary>
        [HttpGet("current")]
        public IActionResult GetName()
        {
            string userName = null;

            if (this.HttpContext.User != null)
            {
                userName = this.HttpContext.User.Identity.Name;
            }

            return this.Json(new { name = userName });
        }

        /// <summary>
        /// Initiates login with an external provider.
        /// </summary>
        /// <param name="provider">The external login provider.</param>
        [HttpGet("login/{provider}")]
        public async Task<IActionResult> Login(string provider)
        {
            // When already signed in with external provider, continue to Register.
            // https://github.com/aspnet/Identity/issues/915
            var info = await this.signInManager.GetExternalLoginInfoAsync();

            if (info != null)
            {
                return this.Redirect("~/api/users/callback?interrupted=true");
            }

            // Request a redirect to the external login provider.
            var properties = this.signInManager.ConfigureExternalAuthenticationProperties(
                provider,
                "api/users/callback");

            return this.Challenge(properties, provider);
        }
    }
}